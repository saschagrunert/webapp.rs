
# This file was @generated by crate2nix 0.8.0 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrate ? pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "webapp";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  root_crate =
    internal.deprecationWarning 
      "root_crate is deprecated since crate2nix 0.4. Please use rootCrate instead." 
      rootCrate.build;
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "webapp" = rec {
      packageId = "webapp";
      build = internal.buildRustCrateWithFeatures {
        packageId = "webapp";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "webapp-backend" = rec {
      packageId = "webapp-backend";
      build = internal.buildRustCrateWithFeatures {
        packageId = "webapp-backend";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "webapp-frontend" = rec {
      packageId = "webapp-frontend";
      build = internal.buildRustCrateWithFeatures {
        packageId = "webapp-frontend";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };
  workspace_members =
    internal.deprecationWarning
      "workspace_members is deprecated in crate2nix 0.4. Please use workspaceMembers instead."
      lib.mapAttrs (n: v: v.build) workspaceMembers;

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "actix" = rec {
        crateName = "actix";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1bzw70m2cfk4vpg2y1y823llb321r75405cqz7ldwngn9xb8gbx4";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-http";
            packageId = "actix-http";
            optional = true;
          }
          {
            name = "actix-rt";
            packageId = "actix-rt";
          }
          {
            name = "actix_derive";
            packageId = "actix_derive";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "rt-core" "rt-util" "io-driver" "tcp" "uds" "udp" "time" "signal" "sync" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.2.0";
            features = [ "full" ];
          }
          {
            name = "trust-dns-proto";
            packageId = "trust-dns-proto";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "trust-dns-resolver";
            packageId = "trust-dns-resolver";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "resolver" "http" ];
          "http" = [ "actix-http" ];
          "resolver" = [ "trust-dns-proto" "trust-dns-resolver" ];
        };
        resolvedDefaultFeatures = [ "actix-http" "default" "http" "resolver" "trust-dns-proto" "trust-dns-resolver" ];
      };
      "actix-codec" = rec {
        crateName = "actix-codec";
        version = "0.2.0";
        edition = "2018";
        sha256 = "100k0n155fnnjqjz2s1gnwim2fp7s1mw942x0famg89cbh55zr89";
        libName = "actix_codec";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.2.0";
            usesDefaultFeatures = false;
            features = [ "codec" ];
          }
        ];
        
      };
      "actix-connect" = rec {
        crateName = "actix-connect";
        version = "1.0.2";
        edition = "2018";
        sha256 = "0v77m394gzbrrzg12xkqgli11vwhig0zcxy3yhmq1s91j9bcjp69";
        libName = "actix_connect";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-codec";
            packageId = "actix-codec";
          }
          {
            name = "actix-rt";
            packageId = "actix-rt";
          }
          {
            name = "actix-service";
            packageId = "actix-service";
          }
          {
            name = "actix-utils";
            packageId = "actix-utils";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "openssl";
            packageId = "openssl";
            rename = "open-ssl";
            optional = true;
          }
          {
            name = "tokio-openssl";
            packageId = "tokio-openssl";
            optional = true;
          }
          {
            name = "trust-dns-proto";
            packageId = "trust-dns-proto";
          }
          {
            name = "trust-dns-resolver";
            packageId = "trust-dns-resolver";
          }
        ];
        features = {
          "default" = [ "uri" ];
          "openssl" = [ "open-ssl" "tokio-openssl" ];
          "rustls" = [ "rust-tls" "tokio-rustls" "webpki" ];
          "uri" = [ "http" ];
        };
        resolvedDefaultFeatures = [ "default" "http" "open-ssl" "openssl" "tokio-openssl" "uri" ];
      };
      "actix-cors" = rec {
        crateName = "actix-cors";
        version = "0.2.0";
        edition = "2018";
        sha256 = "00p0f7crbxg185idjxpjmgs2v01y5pq9xv0wv1wxs3swgn8hcqha";
        libName = "actix_cors";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-service";
            packageId = "actix-service";
          }
          {
            name = "actix-web";
            packageId = "actix-web";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        
      };
      "actix-files" = rec {
        crateName = "actix-files";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0iiwllg6558rv49kyq4b5iyihbingp5n7bbf8hx4hx1x3n28451h";
        libName = "actix_files";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-http";
            packageId = "actix-http";
          }
          {
            name = "actix-service";
            packageId = "actix-service";
          }
          {
            name = "actix-web";
            packageId = "actix-web";
            usesDefaultFeatures = false;
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "mime_guess";
            packageId = "mime_guess";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "v_htmlescape";
            packageId = "v_htmlescape";
          }
        ];
        devDependencies = [
          {
            name = "actix-web";
            packageId = "actix-web";
            features = [ "openssl" ];
          }
        ];
        
      };
      "actix-http" = rec {
        crateName = "actix-http";
        version = "1.0.1";
        edition = "2018";
        sha256 = "06chrs9asbxmxzgiw5sw7ky97yrin9g88nmd6w407a6y9z668rn1";
        libName = "actix_http";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-codec";
            packageId = "actix-codec";
          }
          {
            name = "actix-connect";
            packageId = "actix-connect";
          }
          {
            name = "actix-rt";
            packageId = "actix-rt";
          }
          {
            name = "actix-service";
            packageId = "actix-service";
          }
          {
            name = "actix-threadpool";
            packageId = "actix-threadpool";
          }
          {
            name = "actix-tls";
            packageId = "actix-tls";
            optional = true;
          }
          {
            name = "actix-utils";
            packageId = "actix-utils";
          }
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "brotli2";
            packageId = "brotli2";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "copyless";
            packageId = "copyless";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
          }
          {
            name = "failure";
            packageId = "failure";
            rename = "fail-ure";
            optional = true;
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "fxhash";
            packageId = "fxhash";
          }
          {
            name = "h2";
            packageId = "h2";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "language-tags";
            packageId = "language-tags";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "time";
            packageId = "time";
          }
        ];
        devDependencies = [
          {
            name = "actix-connect";
            packageId = "actix-connect";
            features = [ "openssl" ];
          }
          {
            name = "actix-tls";
            packageId = "actix-tls";
            features = [ "openssl" ];
          }
        ];
        features = {
          "compress" = [ "flate2" "brotli2" ];
          "failure" = [ "fail-ure" ];
          "openssl" = [ "actix-tls/openssl" "actix-connect/openssl" ];
          "rustls" = [ "actix-tls/rustls" "actix-connect/rustls" ];
          "secure-cookies" = [ "ring" ];
        };
        resolvedDefaultFeatures = [ "actix-tls" "brotli2" "compress" "default" "fail-ure" "failure" "flate2" "openssl" ];
      };
      "actix-http-test" = rec {
        crateName = "actix-http-test";
        version = "1.0.0";
        edition = "2018";
        sha256 = "06z6iy9ffsjcw3g8zwwghky5zpyg7c1z823x35lgc4y1yjzxfizq";
        libName = "actix_http_test";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-codec";
            packageId = "actix-codec";
          }
          {
            name = "actix-connect";
            packageId = "actix-connect";
          }
          {
            name = "actix-rt";
            packageId = "actix-rt";
          }
          {
            name = "actix-server";
            packageId = "actix-server";
          }
          {
            name = "actix-service";
            packageId = "actix-service";
          }
          {
            name = "actix-testing";
            packageId = "actix-testing";
          }
          {
            name = "actix-utils";
            packageId = "actix-utils";
          }
          {
            name = "awc";
            packageId = "awc";
          }
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "env_logger";
            packageId = "env_logger 0.6.2";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "net2";
            packageId = "net2";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "time";
            packageId = "time";
          }
        ];
        features = {
          "openssl" = [ "open-ssl" "awc/openssl" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "actix-macros" = rec {
        crateName = "actix-macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1dhn4fvw79pfnq5sc12pbq0wc06di4xfg4288fcbrr5vfvf5lw11";
        procMacro = true;
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        
      };
      "actix-router" = rec {
        crateName = "actix-router";
        version = "0.2.4";
        edition = "2018";
        sha256 = "1j1y7l4k2dfj3h72p81waskajyxrl6mp6lbwm3kwis4l9p510ylx";
        libName = "actix_router";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytestring";
            packageId = "bytestring";
          }
          {
            name = "http";
            packageId = "http";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        devDependencies = [
          {
            name = "http";
            packageId = "http";
          }
        ];
        features = {
          "default" = [ "http" ];
        };
        resolvedDefaultFeatures = [ "default" "http" ];
      };
      "actix-rt" = rec {
        crateName = "actix-rt";
        version = "1.1.1";
        edition = "2018";
        sha256 = "09xj7pxy0ng13rd6hya1md98dhk0586p4bsfrwmxxlg028lwqgql";
        libName = "actix_rt";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-macros";
            packageId = "actix-macros";
          }
          {
            name = "actix-threadpool";
            packageId = "actix-threadpool";
          }
          {
            name = "copyless";
            packageId = "copyless";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "rt-core" "rt-util" "io-driver" "tcp" "uds" "udp" "time" "signal" "stream" ];
          }
        ];
        
      };
      "actix-server" = rec {
        crateName = "actix-server";
        version = "1.0.2";
        edition = "2018";
        sha256 = "1j9jlskls9n25hqkjyhpf75ks61pgwga2s51b9mz9941q9rp2ajq";
        libName = "actix_server";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-codec";
            packageId = "actix-codec";
          }
          {
            name = "actix-rt";
            packageId = "actix-rt";
          }
          {
            name = "actix-service";
            packageId = "actix-service";
          }
          {
            name = "actix-utils";
            packageId = "actix-utils";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mio";
            packageId = "mio";
          }
          {
            name = "mio-uds";
            packageId = "mio-uds";
          }
          {
            name = "net2";
            packageId = "net2";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "slab";
            packageId = "slab";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "actix-service" = rec {
        crateName = "actix-service";
        version = "1.0.5";
        edition = "2018";
        sha256 = "0r3m51fackpwj73awg2fkr4yic4abyw4dfyhn9ql3qm7vyazrr6k";
        libName = "actix_service";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
        ];
        
      };
      "actix-testing" = rec {
        crateName = "actix-testing";
        version = "1.0.0";
        edition = "2018";
        sha256 = "04f969nz596y9v0f07h8sw1yx8r2nvwslx7q1kzsh3idnx2lfja8";
        libName = "actix_testing";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-macros";
            packageId = "actix-macros";
          }
          {
            name = "actix-rt";
            packageId = "actix-rt";
          }
          {
            name = "actix-server";
            packageId = "actix-server";
          }
          {
            name = "actix-service";
            packageId = "actix-service";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "net2";
            packageId = "net2";
          }
        ];
        
      };
      "actix-threadpool" = rec {
        crateName = "actix-threadpool";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0kp8qqihll3s6r7v4zxgqhdnmjl19pw9yw0k60q5zph14qcq4h6g";
        libName = "actix_threadpool";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "threadpool";
            packageId = "threadpool";
          }
        ];
        
      };
      "actix-tls" = rec {
        crateName = "actix-tls";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1a4m96jz6vzmknpk5m803c337c6dillnqq4w71nrlphhmzxb9rd4";
        libName = "actix_tls";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-codec";
            packageId = "actix-codec";
          }
          {
            name = "actix-rt";
            packageId = "actix-rt";
          }
          {
            name = "actix-service";
            packageId = "actix-service";
          }
          {
            name = "actix-utils";
            packageId = "actix-utils";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "openssl";
            packageId = "openssl";
            rename = "open-ssl";
            optional = true;
          }
          {
            name = "tokio-openssl";
            packageId = "tokio-openssl";
            optional = true;
          }
        ];
        features = {
          "nativetls" = [ "native-tls" "tokio-tls" ];
          "openssl" = [ "open-ssl" "tokio-openssl" ];
          "rustls" = [ "rust-tls" "webpki" "webpki-roots" "tokio-rustls" ];
        };
        resolvedDefaultFeatures = [ "default" "open-ssl" "openssl" "tokio-openssl" ];
      };
      "actix-utils" = rec {
        crateName = "actix-utils";
        version = "1.0.6";
        edition = "2018";
        sha256 = "0kkz2hfz8r2k1gxcjk2qq1h1qxlb487g023q4v1dw6ph3dizby7w";
        libName = "actix_utils";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-codec";
            packageId = "actix-codec";
          }
          {
            name = "actix-rt";
            packageId = "actix-rt";
          }
          {
            name = "actix-service";
            packageId = "actix-service";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "slab";
            packageId = "slab";
          }
        ];
        
      };
      "actix-web" = rec {
        crateName = "actix-web";
        version = "2.0.0";
        edition = "2018";
        sha256 = "0dgnn7xiw2yhvrx7l7b57gwra7yfqawka5xz1lpq4h0h8qifhn1i";
        libName = "actix_web";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-codec";
            packageId = "actix-codec";
          }
          {
            name = "actix-http";
            packageId = "actix-http";
          }
          {
            name = "actix-macros";
            packageId = "actix-macros";
          }
          {
            name = "actix-router";
            packageId = "actix-router";
          }
          {
            name = "actix-rt";
            packageId = "actix-rt";
          }
          {
            name = "actix-server";
            packageId = "actix-server";
          }
          {
            name = "actix-service";
            packageId = "actix-service";
          }
          {
            name = "actix-testing";
            packageId = "actix-testing";
          }
          {
            name = "actix-threadpool";
            packageId = "actix-threadpool";
          }
          {
            name = "actix-tls";
            packageId = "actix-tls";
          }
          {
            name = "actix-utils";
            packageId = "actix-utils";
          }
          {
            name = "actix-web-codegen";
            packageId = "actix-web-codegen";
          }
          {
            name = "awc";
            packageId = "awc";
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "fxhash";
            packageId = "fxhash";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "net2";
            packageId = "net2";
          }
          {
            name = "openssl";
            packageId = "openssl";
            rename = "open-ssl";
            optional = true;
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "time";
            packageId = "time";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "compress" = [ "actix-http/compress" "awc/compress" ];
          "default" = [ "compress" "failure" ];
          "failure" = [ "actix-http/failure" ];
          "openssl" = [ "actix-tls/openssl" "awc/openssl" "open-ssl" ];
          "rustls" = [ "actix-tls/rustls" "awc/rustls" "rust-tls" ];
          "secure-cookies" = [ "actix-http/secure-cookies" ];
        };
        resolvedDefaultFeatures = [ "compress" "default" "failure" "open-ssl" "openssl" ];
      };
      "actix-web-codegen" = rec {
        crateName = "actix-web-codegen";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0mzh74nakkmrmhs4asn9wwz93waa2r0caa3ybxw6jd0888ckf02g";
        procMacro = true;
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" "parsing" ];
          }
        ];
        
      };
      "actix_derive" = rec {
        crateName = "actix_derive";
        version = "0.5.0";
        edition = "2018";
        sha256 = "0k1kg4gkp2jhi5fgdfd0cq2qfbyy3gfgwqjrvzq1hzrjmynwwnmr";
        procMacro = true;
        authors = [
          "Callym <hi@callym.com>"
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        
      };
      "adler32" = rec {
        crateName = "adler32";
        version = "1.0.4";
        edition = "2015";
        sha256 = "1hnan4fgmnidgn2k84hh2i67c3wp2c5iwd5hs61yi7gwwx1p6bjx";
        authors = [
          "Remi Rampin <remirampin@gmail.com>"
        ];
        
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "0.7.10";
        edition = "2015";
        sha256 = "1nka9509afjgal6lpymn8w2lq11dmjwxs8yjcmzys966if5l05l7";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "memchr/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ansi_term" = rec {
        crateName = "ansi_term";
        version = "0.11.0";
        edition = "2015";
        sha256 = "16wpvrghvd0353584i1idnsgm0r3vchg8fyrm0x8ayv1rgvbljgf";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: (target."os" == "windows");
            features = [ "errhandlingapi" "consoleapi" "processenv" ];
          }
        ];
        
      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.28";
        edition = "2018";
        sha256 = "1zzvf2sj0n5z697ngqx1q4aficxw48djrzkxcp5hzhw099s0v9nr";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "anymap" = rec {
        crateName = "anymap";
        version = "0.12.1";
        edition = "2015";
        sha256 = "0i23vv38i22aazp5z2hz0a44b943b6w5121kwwnpq1brpm1l559k";
        authors = [
          "Chris Morgan <me@chrismorgan.info>"
        ];
        features = {
        };
      };
      "arc-swap" = rec {
        crateName = "arc-swap";
        version = "0.4.6";
        edition = "2015";
        sha256 = "0qhgb2wys9sxi7d380w5wvsf3zcijf62gs8365bgqijc4f5ak1dm";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
        ];
        features = {
        };
      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.4.12";
        edition = "2015";
        sha256 = "1fdiv5m627gh6flp4mpmi1mh647imm9x423licsr11psz97d97yd";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "nodrop";
            packageId = "nodrop";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde-1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "array-sizes-33-128" "default" "std" ];
      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.30";
        edition = "2018";
        sha256 = "07dkhsrlwc8rwidfwy52231697r85499fzi4j1h5h1n8ggqgwwfs";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" "visit-mut" ];
          }
        ];
        
      };
      "atty" = rec {
        crateName = "atty";
        version = "0.2.14";
        edition = "2015";
        sha256 = "1s7yslcs6a28c5vz7jwj63lkfgyx8mx99fdirlhi9lbhhzhrpcyr";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (target."os" == "hermit");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          }
        ];
        
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.0.0";
        edition = "2015";
        sha256 = "17cv6pwb4q08s0ynpr4n8hv5299hcmhdgvdchzixfpw8y5qcgapq";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        
      };
      "awc" = rec {
        crateName = "awc";
        version = "1.0.1";
        edition = "2018";
        sha256 = "1idacmq7n3irmdjkbxc5kdwspxk9w1gip94pcmfk7wky3m6isq6p";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "actix-codec";
            packageId = "actix-codec";
          }
          {
            name = "actix-http";
            packageId = "actix-http";
          }
          {
            name = "actix-rt";
            packageId = "actix-rt";
          }
          {
            name = "actix-service";
            packageId = "actix-service";
          }
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "openssl";
            packageId = "openssl";
            rename = "open-ssl";
            optional = true;
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
        ];
        devDependencies = [
          {
            name = "actix-http";
            packageId = "actix-http";
            features = [ "openssl" ];
          }
        ];
        features = {
          "compress" = [ "actix-http/compress" ];
          "default" = [ "compress" ];
          "openssl" = [ "open-ssl" "actix-http/openssl" ];
          "rustls" = [ "rust-tls" "actix-http/rustls" ];
        };
        resolvedDefaultFeatures = [ "compress" "default" "open-ssl" "openssl" ];
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.46";
        edition = "2018";
        sha256 = "17hh1vrhfd01qpjilrdpy7q0lf2j2qv36achpg37q92rff4r5rmi";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "backtrace-sys";
            packageId = "backtrace-sys";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        features = {
          "default" = [ "std" "libunwind" "libbacktrace" "dladdr" "dbghelp" ];
          "gimli-symbolize" = [ "addr2line" "findshlibs" "memmap" "goblin" ];
          "libbacktrace" = [ "backtrace-sys/backtrace-sys" ];
          "rustc-dep-of-std" = [ "backtrace-sys/rustc-dep-of-std" "cfg-if/rustc-dep-of-std" "core" "compiler_builtins" "libc/rustc-dep-of-std" "rustc-demangle/rustc-dep-of-std" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" ];
          "verify-winapi" = [ "winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/winbase" "winapi/winnt" ];
        };
        resolvedDefaultFeatures = [ "backtrace-sys" "dbghelp" "default" "dladdr" "libbacktrace" "libunwind" "std" ];
      };
      "backtrace-sys" = rec {
        crateName = "backtrace-sys";
        version = "0.1.37";
        edition = "2015";
        sha256 = "16a3igz22q9lnnjjr77f4k8ci48v8zdwrs67khx3h7wx3jzfpyqq";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "backtrace-sys" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "backtrace-sys" ];
      };
      "base-x" = rec {
        crateName = "base-x";
        version = "0.2.6";
        edition = "2015";
        sha256 = "1hfy0wv7j5ynd73yk1vyr32pqa77rp15lkrc54f8ky9c6hcbc80v";
        authors = [
          "Alex R. <alexei.rudenko@gmail.com>"
        ];
        
      };
      "base64" = rec {
        crateName = "base64";
        version = "0.11.0";
        edition = "2018";
        sha256 = "1iqmims6yvr6vwzyy54qd672zw29ipjj17p8klcr578c9ajpw6xl";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bincode" = rec {
        crateName = "bincode";
        version = "1.2.1";
        edition = "2015";
        sha256 = "1gvxm3n67xv1874fwxmnlircdlphlk1hcw75ykrrnw9l2nky4lsp";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Francesco Mazzoli <f@mazzo.li>"
          "David Tolnay <dtolnay@gmail.com>"
          "Daniel Griffen"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
        };
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.2.1";
        edition = "2015";
        sha256 = "14qnd5nq8p2almk79m4m8ydqhd413yaxsyjp5xd19g3mikzf47fg";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "boolinator" = rec {
        crateName = "boolinator";
        version = "2.4.0";
        edition = "2015";
        sha256 = "1nccxzb1dfkjfrgzqaw1a90p26zlvv6nah5ckcpj6bn9a4zqga6g";
        authors = [
          "Daniel Keep <daniel.keep@gmail.com>"
        ];
        
      };
      "brotli-sys" = rec {
        crateName = "brotli-sys";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1kdfdbcba6zwa13xpjwgiplblkdf6vigxjbwwp6l2ascbylxwia4";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        
      };
      "brotli2" = rec {
        crateName = "brotli2";
        version = "0.3.2";
        edition = "2015";
        sha256 = "13jnhpmfkqy2xar4lxrsk3rx3i12bgnarnsxq4arhc6yxb1kdc0c";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "brotli-sys";
            packageId = "brotli-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.2.1";
        edition = "2018";
        sha256 = "11silgpsnfv6ir7j2nh7a69564f92vq20k9ha7zcbynpiav9vbhj";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.3.4";
        edition = "2015";
        sha256 = "1pkjfhgjnq898g1d38ygcfi0msg3m6756cwv0sgysj1d26p8mi08";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "0.5.4";
        edition = "2018";
        sha256 = "1q9r7si1l8vndg4n2ny2nv833ghp5vyqzk5indb9rmhd5ibaq2hk";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytestring" = rec {
        crateName = "bytestring";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0qzkncgky5p5vsdb9msmfg6d92dcs9idcjcr5nk7inkja7x0az7w";
        authors = [
          "Nikolay Kim <fafhrd91@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
        ];
        
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.52";
        edition = "2018";
        crateBin = [];
        sha256 = "07g3qpa0gab3b0niw5ljzak6lgq34zjsv98hylxd0b59sqippn63";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "jobserver" ];
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "0.1.10";
        edition = "2018";
        sha256 = "08h80ihs74jcyp24cd75wwabygbbdgl05k6p5dmq8akbr78vv1a7";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cfg-match" = rec {
        crateName = "cfg-match";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0d3v9qsin7jh7mml9ac47hwpcwag58zwfc19vkv5pf1fz5py8041";
        authors = [
          "arcnmx"
        ];
        
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.11";
        edition = "2015";
        sha256 = "1cmmxamkzzs36zncqjjr7qm7xkb6zyrkjslnlj3axdgqki84y2c0";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
          "Brandon W Maister <quodlibetor@gmail.com>"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
          }
        ];
        features = {
          "clock" = [ "time" "std" ];
          "default" = [ "clock" "std" ];
          "wasmbind" = [ "wasm-bindgen" "js-sys" ];
        };
        resolvedDefaultFeatures = [ "clock" "default" "std" "time" ];
      };
      "clap" = rec {
        crateName = "clap";
        version = "2.33.0";
        edition = "2015";
        sha256 = "1nf6ld3bims1n5vfzhkvcb55pdzh04bbhzf8nil5vvw05nxzarsh";
        authors = [
          "Kevin K. <kbknapp@gmail.com>"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
            optional = true;
            target = { target, features }: (!target."windows");
          }
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "textwrap";
            packageId = "textwrap";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
            optional = true;
          }
          {
            name = "yaml-rust";
            packageId = "yaml-rust";
            optional = true;
          }
        ];
        features = {
          "color" = [ "ansi_term" "atty" ];
          "default" = [ "suggestions" "color" "vec_map" ];
          "doc" = [ "yaml" ];
          "lints" = [ "clippy" ];
          "suggestions" = [ "strsim" ];
          "wrap_help" = [ "term_size" "textwrap/term_size" ];
          "yaml" = [ "yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "ansi_term" "atty" "color" "default" "strsim" "suggestions" "vec_map" "yaml" "yaml-rust" ];
      };
      "cloudabi" = rec {
        crateName = "cloudabi";
        version = "0.0.3";
        edition = "2015";
        sha256 = "0kxcg83jlihy0phnd2g8c2c303px3l2p3pkjz357ll6llnd5pz6x";
        libPath = "cloudabi.rs";
        authors = [
          "Nuxi (https://nuxi.nl/) and contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
        ];
        features = {
          "default" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" "default" ];
      };
      "copyless" = rec {
        crateName = "copyless";
        version = "0.1.4";
        edition = "2018";
        sha256 = "09s1fagd14fqch3xq9ijschay014la2i8hqfxw2rr95jkxncbybg";
        authors = [
          "Dzmitry Malyshau <kvarkus@gmail.com>"
        ];
        
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.7.0";
        edition = "2015";
        sha256 = "0wbias8f0m5kyn2pcksi0h58fdslams6nmf16w78fgn42dx4rljp";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1b5qfnnmg49sawwfsb0c0wbj81bqi7h7lh68pmhbidf0jjs1m9xk";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
        };
      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1c9dhkvf3brrzzplcijaywxi2w8wv5578i0ryhcm7x8dmzi5s4ms";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.4.2";
        edition = "2015";
        sha256 = "0qd05n5bcwafkmbzq1lspwrfi29xnzlw46qarg1sl0lwj68qdvfc";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
        ];
        
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.7.2";
        edition = "2015";
        sha256 = "1a31wbrda1320gj2a6az1lin2d34xfc3xf88da4c17qy5lxcgiy3";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
      "derive_more" = rec {
        crateName = "derive_more";
        version = "0.99.5";
        edition = "2018";
        sha256 = "19shnldl3xmigflx27j5zjbqa2fjv02hcc3srrvhx6nv8wzkycp2";
        procMacro = true;
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "add_assign" "add" "as_mut" "as_ref" "constructor" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "iterator" "mul_assign" "mul" "not" "sum" "try_into" ];
          "generate-parsing-rs" = [ "peg" ];
          "testing-helpers" = [ "rustc_version" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_mut" "as_ref" "constructor" "default" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "iterator" "mul" "mul_assign" "not" "sum" "try_into" ];
      };
      "diesel" = rec {
        crateName = "diesel";
        version = "1.4.4";
        edition = "2015";
        sha256 = "1z6q2gpizn61bm3ggbalpnrf8b4yqjn878jngxxaizifxdiwmmrk";
        authors = [
          "Sean Griffin <sean@seantheprogrammer.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "diesel_derives";
            packageId = "diesel_derives";
          }
          {
            name = "pq-sys";
            packageId = "pq-sys";
            optional = true;
          }
          {
            name = "r2d2";
            packageId = "r2d2";
            optional = true;
          }
        ];
        features = {
          "128-column-tables" = [ "64-column-tables" ];
          "64-column-tables" = [ "32-column-tables" ];
          "default" = [ "with-deprecated" "32-column-tables" ];
          "deprecated-time" = [ "time" ];
          "extras" = [ "chrono" "serde_json" "uuid" "deprecated-time" "network-address" "numeric" "r2d2" ];
          "huge-tables" = [ "64-column-tables" ];
          "large-tables" = [ "32-column-tables" ];
          "mysql" = [ "mysqlclient-sys" "url" "percent-encoding" "diesel_derives/mysql" ];
          "network-address" = [ "ipnetwork" "libc" ];
          "numeric" = [ "num-bigint" "bigdecimal" "num-traits" "num-integer" ];
          "postgres" = [ "pq-sys" "bitflags" "diesel_derives/postgres" ];
          "sqlite" = [ "libsqlite3-sys" "diesel_derives/sqlite" ];
          "unstable" = [ "diesel_derives/nightly" ];
          "x128-column-tables" = [ "128-column-tables" ];
          "x32-column-tables" = [ "32-column-tables" ];
          "x64-column-tables" = [ "64-column-tables" ];
        };
        resolvedDefaultFeatures = [ "32-column-tables" "bitflags" "default" "postgres" "pq-sys" "r2d2" "with-deprecated" ];
      };
      "diesel_derives" = rec {
        crateName = "diesel_derives";
        version = "1.4.1";
        edition = "2015";
        sha256 = "1lsq133fwk0zj8xvxhdxqgg0xs31zf3abnwdyshaf0ldca7hkxa5";
        procMacro = true;
        authors = [
          "Sean Griffin <sean@seantheprogrammer.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" "fold" ];
          }
        ];
        features = {
          "nightly" = [ "proc-macro2/nightly" ];
        };
        resolvedDefaultFeatures = [ "default" "postgres" ];
      };
      "discard" = rec {
        crateName = "discard";
        version = "1.0.4";
        edition = "2015";
        sha256 = "1h67ni5bxvg95s91wgicily4ix7lcw7cq0a5gy9njrybaibhyb91";
        authors = [
          "Pauan <pcxunlimited@gmail.com>"
        ];
        
      };
      "dtoa" = rec {
        crateName = "dtoa";
        version = "0.4.5";
        edition = "2015";
        sha256 = "18qycvcp0vaqzw0j784ansbxgs39l54ini9v719cy2cs3ghsjn23";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        
      };
      "either" = rec {
        crateName = "either";
        version = "1.5.3";
        edition = "2015";
        sha256 = "1qyz1b1acad6w0k5928jw5zaq900zhsk7p8dlcp4hh61w4f6n7xv";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "encoding_rs" = rec {
        crateName = "encoding_rs";
        version = "0.8.22";
        edition = "2015";
        sha256 = "0a5wckbnpjjgxvvycahy5vw31br7x2xxgylxc0qi837ylzx073fd";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "fast-legacy-encode" = [ "fast-hangul-encode" "fast-hanja-encode" "fast-kanji-encode" "fast-gb-hanzi-encode" "fast-big5-hanzi-encode" ];
          "simd-accel" = [ "packed_simd" "packed_simd/into_bits" ];
        };
      };
      "enum-as-inner" = rec {
        crateName = "enum-as-inner";
        version = "0.3.2";
        edition = "2018";
        sha256 = "177c4lknbm1aw11qh5lbcqck69ik3wn20m8xkl833lk1rgxgqjxw";
        procMacro = true;
        authors = [
          "Benjamin Fry <benjaminfry@me.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        
      };
      "env_logger 0.6.2" = rec {
        crateName = "env_logger";
        version = "0.6.2";
        edition = "2015";
        sha256 = "1lx2s5nk96xx4i3m4zc4ghqgi8kb07dsnyiv8jk2clhax42dxz5a";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
        };
        resolvedDefaultFeatures = [ "atty" "default" "humantime" "regex" "termcolor" ];
      };
      "env_logger 0.7.1" = rec {
        crateName = "env_logger";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0djx8h8xfib43g5w94r1m1mkky5spcw4wblzgnhiyg5vnfxknls4";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
        };
        resolvedDefaultFeatures = [ "atty" "default" "humantime" "regex" "termcolor" ];
      };
      "failure" = rec {
        crateName = "failure";
        version = "0.1.8";
        edition = "2015";
        sha256 = "11jg1wmbkijrs6bk9fqnbrm9zf0850whnqpgnxyswbn0dk8rnbnk";
        authors = [
          "Without Boats <boats@mozilla.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "failure_derive";
            packageId = "failure_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "derive" ];
          "derive" = [ "failure_derive" ];
          "std" = [ "backtrace" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "derive" "failure_derive" "std" ];
      };
      "failure_derive" = rec {
        crateName = "failure_derive";
        version = "0.1.8";
        edition = "2015";
        sha256 = "1936adqqk080439kx2bjf1bds7h89sg6wcif4jw0syndcv3s6kda";
        procMacro = true;
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        features = {
        };
      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.0.14";
        edition = "2018";
        sha256 = "0hlb2zmn5ixrgr0i1qvrd3a7j4fpp002d0kddn2hm7hjj49z9zrc";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            target = { target, features }: ((target."arch" == "wasm32") && (!(target."os" == "emscripten")));
          }
        ];
        features = {
          "cloudflare_zlib" = [ "any_zlib" "cloudflare-zlib-sys" ];
          "default" = [ "rust_backend" ];
          "rust_backend" = [ "miniz_oxide" ];
          "tokio" = [ "tokio-io" "futures" ];
          "zlib" = [ "any_zlib" "libz-sys" ];
        };
        resolvedDefaultFeatures = [ "default" "miniz_oxide" "rust_backend" ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.6";
        edition = "2015";
        sha256 = "1ww56bi1r5b8id3ns9j3qxbi7w5h005rzhiryy0zi9h97raqbb9g";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cgk0vyd7r45cj769jym4a6s7vwshvd0z4bqrb92q1fwibmkkwzn";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];
        
      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0jxgzd04ra4imjv8jgkmdq59kj8fsz6w4zxsbmlai34h26225c00";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        
      };
      "fuchsia-zircon" = rec {
        crateName = "fuchsia-zircon";
        version = "0.3.3";
        edition = "2015";
        sha256 = "10jxc5ks1x06gpd0xg51kcjrxr35nj6qhx2zlc5n7bmskv3675rf";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "fuchsia-zircon-sys";
            packageId = "fuchsia-zircon-sys";
          }
        ];
        
      };
      "fuchsia-zircon-sys" = rec {
        crateName = "fuchsia-zircon-sys";
        version = "0.3.3";
        edition = "2015";
        sha256 = "19zp2085qsyq2bh1gvcxq1lb8w6v6jj9kbdkhpdjrl95fypakjix";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.4";
        edition = "2018";
        sha256 = "105p5bwjf2dsclvi95g784n6b51az8ibdhjgmr2gn0imfpl9lcjw";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" "futures-sink/alloc" "futures-channel/alloc" "futures-util/alloc" ];
          "async-await" = [ "futures-util/async-await" "futures-util/async-await-macro" ];
          "bilock" = [ "futures-util/bilock" ];
          "cfg-target-has-atomic" = [ "futures-core/cfg-target-has-atomic" "futures-task/cfg-target-has-atomic" "futures-channel/cfg-target-has-atomic" "futures-util/cfg-target-has-atomic" ];
          "compat" = [ "std" "futures-util/compat" ];
          "default" = [ "std" "async-await" "executor" ];
          "executor" = [ "std" "futures-executor/std" ];
          "io-compat" = [ "compat" "futures-util/io-compat" ];
          "read-initializer" = [ "futures-io/read-initializer" "futures-util/read-initializer" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "futures-io/std" "futures-sink/std" "futures-util/std" "futures-util/io" "futures-util/channel" ];
          "thread-pool" = [ "executor" "futures-executor/thread-pool" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" "futures-channel/unstable" "futures-io/unstable" "futures-util/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "default" "executor" "futures-executor" "std" ];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1a7iq7m4ggq2njrm7h1x2v2gxzxkd2160awk0fwrrpcfrq27vizh";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "cfg-target-has-atomic" = [ "futures-core/cfg-target-has-atomic" ];
          "default" = [ "std" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" ];
          "unstable" = [ "futures-core/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "futures-sink" "sink" "std" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.4";
        edition = "2018";
        sha256 = "0jj6mjvjbvv36r6w86lmjkh62mwndz901nsq4fwqjpl2d7vr4mgj";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1fj1jw8g7l5v1sf7lh0w0smq596vmxaxzklh98l3fnxipkhz6x7n";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "futures-core/std" "futures-task/std" "futures-util/std" ];
          "thread-pool" = [ "std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1ihd1429kyfncxpc4mvina1hbppywfqzql6zrnjcflk1m6d9af56";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.4";
        edition = "2018";
        sha256 = "19r3akc8y0br6jbx0lh1cfq07n8f23g7qfaag4m59xz17nm82l4s";
        procMacro = true;
        authors = [
          "Taylor Cramer <cramertj@google.com>"
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        
      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.4";
        edition = "2018";
        sha256 = "19n88jlh8cwam4gqzj4vj9g130vg9ir0m1bv11dxj5619cdq4ril";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.4";
        edition = "2018";
        sha256 = "09ss6zg7w36s3y2715bnvfrnwr3b8vnklmxag00wvkgn7kjk82kv";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1i84h30q2q93y4l4bk2g22mp96aws02a0k9qy3nnnc34bpr6qxi2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
            optional = true;
          }
          {
            name = "proc-macro-nested";
            packageId = "proc-macro-nested";
            optional = true;
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" "proc-macro-hack" "proc-macro-nested" ];
          "cfg-target-has-atomic" = [ "futures-core/cfg-target-has-atomic" "futures-task/cfg-target-has-atomic" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "read-initializer" = [ "io" "futures-io/read-initializer" "futures-io/unstable" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "async-await-macro" "channel" "default" "futures-channel" "futures-io" "futures-macro" "futures-sink" "io" "memchr" "proc-macro-hack" "proc-macro-nested" "sink" "slab" "std" ];
      };
      "fxhash" = rec {
        crateName = "fxhash";
        version = "0.2.1";
        edition = "2015";
        sha256 = "037mb9ichariqi45xm6mz0b11pa92gj38ba0409z3iz239sns6y3";
        libPath = "lib.rs";
        authors = [
          "cbreeden <github@u.breeden.cc>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];
        
      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.1.14";
        edition = "2018";
        sha256 = "1sq30li71h19rhnhs1h6576ja68insajx8wvh1nn088r8pc8vg3s";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "wasi";
            packageId = "wasi";
            target = { target, features }: (target."os" == "wasi");
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "compiler_builtins" "core" ];
          "test-in-browser" = [ "wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "h2" = rec {
        crateName = "h2";
        version = "0.2.5";
        edition = "2018";
        sha256 = "1zs3x3bnh5lrcfpi0qzfprmsj5rnzffa6g89z81rr5sbgrnj9dvr";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-util" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.3.1";
            features = [ "codec" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "dns" "macros" "rt-core" "sync" "tcp" ];
          }
        ];
        features = {
        };
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.3.1";
        edition = "2015";
        sha256 = "01a2v7yvkiqxakdqz4hw3w3g4sm52ivz9cs3qcsv2arxsmw4wmi0";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];
        
      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.1.12";
        edition = "2015";
        sha256 = "1x58a77yrcg77kk1brvvjmqp186l67fd4ysqaram5qxcmbvmymk1";
        authors = [
          "Stefan Lankes"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins/rustc-dep-of-std" "libc/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hostname" = rec {
        crateName = "hostname";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0rz8yf70cvzl3nry71m4bz9w6x4j9kdz3qng6pnwhk2h20z1qwrw";
        authors = [
          "fengcen <fengcen.love@gmail.com>"
          "svartalf <self@svartalf.info>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" || (target."os" == "redox"));
          }
          {
            name = "match_cfg";
            packageId = "match_cfg";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: (target."os" == "windows");
            features = [ "sysinfoapi" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "http" = rec {
        crateName = "http";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1y827q7j0gvs8z2x12biaik9db6nb902lpqv889cbcj84sbnkm98";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
        
      };
      "http-body" = rec {
        crateName = "http-body";
        version = "0.3.1";
        edition = "2018";
        sha256 = "06qi0ni45lb92w3ml260c0bxbq5zd4snjmz0a9k69xq6021zzm8k";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http";
          }
        ];
        
      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.3.4";
        edition = "2015";
        sha256 = "1yf23ldnjwfkkhkca7f4w15mky9961gjz28dlwyybhphc7l9l5yd";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "humantime" = rec {
        crateName = "humantime";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0krwgbf35pd46xvkqg14j070vircsndabahahlv3rwhflpy4q06z";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
        ];
        dependencies = [
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        
      };
      "hyper" = rec {
        crateName = "hyper";
        version = "0.13.5";
        edition = "2018";
        sha256 = "054bnzhxwnwkijlfb7i26j75licqfx7snnm813969jhyj8fnx0cn";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "net2";
            packageId = "net2";
            optional = true;
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "time";
            packageId = "time";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "want";
            packageId = "want";
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "fs" "macros" "io-std" "rt-util" "sync" "time" "test-util" ];
          }
        ];
        features = {
          "default" = [ "runtime" "stream" ];
          "runtime" = [ "tcp" "tokio/rt-core" ];
          "tcp" = [ "net2" "tokio/blocking" "tokio/tcp" "tokio/time" ];
        };
        resolvedDefaultFeatures = [ "net2" "tcp" ];
      };
      "hyper-tls" = rec {
        crateName = "hyper-tls";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1amg79v9dmcc7r4s471544w8pr57fxmw7s9l0xim759b804d7p1s";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
            features = [ "tcp" ];
          }
          {
            name = "native-tls";
            packageId = "native-tls";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-tls";
            packageId = "tokio-tls";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "macros" ];
          }
        ];
        features = {
          "vendored" = [ "native-tls/vendored" ];
        };
      };
      "idna" = rec {
        crateName = "idna";
        version = "0.2.0";
        edition = "2015";
        sha256 = "1a9066imqpdrm1aavfasdyb1zahqaz8jmdcwdawvb1pf60y6gqh2";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
        ];
        
      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "1.3.2";
        edition = "2015";
        sha256 = "14i2gmq9pwaafvlxmsc12j6539hjgqk4j4jz40fz763vbcn08vq7";
        authors = [
          "bluss"
          "Josh Stone <cuviper@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "serde-1" = [ "serde" ];
        };
      };
      "iovec" = rec {
        crateName = "iovec";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0ph73qygwx8i0mblrf110cj59l00gkmsgrpzz1rm85syz5pymcxj";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
        ];
        
      };
      "ipconfig" = rec {
        crateName = "ipconfig";
        version = "0.2.2";
        edition = "2018";
        sha256 = "1mzsagc6bk3i3fpggqlq8am5rxn4hgs297rsaya90w79xj5g3qpp";
        authors = [
          "Liran Ringel <liranringel@gmail.com>"
        ];
        dependencies = [
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: target."windows";
          }
          {
            name = "widestring";
            packageId = "widestring";
            target = { target, features }: target."windows";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
          }
          {
            name = "winreg";
            packageId = "winreg";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "0.4.5";
        edition = "2015";
        sha256 = "13nxqrfnh83a7x5rw4wq2ilp8nxvwy74dxzysdg59dbxqk0agdxq";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.39";
        edition = "2018";
        sha256 = "19v2al75as3fn12gsynf7z0s1scga54xi9glxa5kbrv7wa6l8nps";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        
      };
      "jsonwebtoken" = rec {
        crateName = "jsonwebtoken";
        version = "7.1.0";
        edition = "2018";
        sha256 = "0zyshbcalgan7a3g6a5v2wsh611ag3vf9y2d6f5789srm209w7yi";
        authors = [
          "Vincent Prouillet <hello@vincentprouillet.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "pem";
            packageId = "pem";
          }
          {
            name = "ring";
            packageId = "ring";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "simple_asn1";
            packageId = "simple_asn1";
          }
        ];
        
      };
      "kernel32-sys" = rec {
        crateName = "kernel32-sys";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1389av0601a9yz8dvx5zha9vmkd6ik7ax0idpb032d28555n41vm";
        libName = "kernel32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
      "language-tags" = rec {
        crateName = "language-tags";
        version = "0.2.2";
        edition = "2015";
        sha256 = "16hrjdpa827carq5x4b8zhas24d8kg4s16m6nmmn1kb7cr5qh7d9";
        authors = [
          "Pyfisch <pyfisch@gmail.com>"
        ];
        features = {
          "heap_size" = [ "heapsize" "heapsize_plugin" ];
        };
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
      };
      "lexical-core" = rec {
        crateName = "lexical-core";
        version = "0.6.2";
        edition = "2015";
        sha256 = "146qxf9i5wfj5rla6pjlwj6l5b4ff31vib277fvlzlsxq2jkl16p";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            optional = true;
            features = [ "array-sizes-33-128" ];
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "ryu";
            packageId = "ryu";
            optional = true;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "correct" = [ "arrayvec" "table" ];
          "default" = [ "correct" "ryu" "std" ];
          "grisu3" = [ "dtoa" ];
        };
        resolvedDefaultFeatures = [ "arrayvec" "correct" "default" "ryu" "std" "table" ];
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.69";
        edition = "2015";
        sha256 = "0180d47sglxzjh5rkdl077zxmsiafd53gqbz9q2sj8ab9445rs4r";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "linked-hash-map" = rec {
        crateName = "linked-hash-map";
        version = "0.5.3";
        edition = "2015";
        sha256 = "0jih3za0p1mywlnwcakc462q1byk6z8vnrzdm36hg6cxk7asdmcd";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
        ];
        features = {
          "heapsize_impl" = [ "heapsize" ];
          "serde_impl" = [ "serde" "serde_test" ];
        };
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.3.4";
        edition = "2018";
        sha256 = "0xgc5dzmajh0akbh5d6d7rj9mh5rzpk74pyrc946v2ixgakj9nn4";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        features = {
        };
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1xz18ixccl5c6np4linv3ypc7hpmmgpc5zzd2ymp2ssfx0mhbdhl";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "kv_unstable_sval" = [ "kv_unstable" "sval/fmt" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "lru-cache" = rec {
        crateName = "lru-cache";
        version = "0.1.2";
        edition = "2015";
        sha256 = "071viv6g2p3akwqmfb3c8vsycs5n7kr17b70l7la071jv0d4zqii";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
        ];
        dependencies = [
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
        ];
        features = {
          "heapsize_impl" = [ "heapsize" "linked-hash-map/heapsize_impl" ];
        };
      };
      "match_cfg" = rec {
        crateName = "match_cfg";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1r5j3zqc3qr8ybcx95bk8q57mkizmgmffj5lmicd4i8d9riyigpz";
        authors = [
          "gnzlbg <gonzalobg88@gmail.com>"
        ];
        features = {
          "default" = [ "use_core" ];
        };
        resolvedDefaultFeatures = [ "default" "use_core" ];
      };
      "matches" = rec {
        crateName = "matches";
        version = "0.1.8";
        edition = "2015";
        sha256 = "020axl4q7rk9vz90phs7f8jas4imxal9y9kxl4z4v7a6719mrz3z";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        
      };
      "maybe-uninit" = rec {
        crateName = "maybe-uninit";
        version = "2.0.0";
        edition = "2015";
        sha256 = "004y0nzmpfdrhz251278341z6ql34iv1k6dp1h6af7d6nd6jwc30";
        authors = [
          "est31 <MTest31@outlook.com>"
          "The Rust Project Developers"
        ];
        
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.3.3";
        edition = "2015";
        sha256 = "0074pvsfl938ndl5js14ibc7i9q0k3zp390z843w8nlyv4bxha1p";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "use_std" ];
      };
      "mime" = rec {
        crateName = "mime";
        version = "0.3.16";
        edition = "2015";
        sha256 = "13dcm9lh01hdwfjcg74ppljyjfj1c6w3a3cwkhxf0w8wa37cfq1a";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        
      };
      "mime_guess" = rec {
        crateName = "mime_guess";
        version = "2.0.3";
        edition = "2015";
        sha256 = "04pjpbl90z4yn0cmifvwgf4mqznciw6b095k626q96bxx71d9116";
        authors = [
          "Austin Bonander <austin.bonander@gmail.com>"
        ];
        dependencies = [
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "unicase";
            packageId = "unicase";
          }
        ];
        buildDependencies = [
          {
            name = "unicase";
            packageId = "unicase";
          }
        ];
        features = {
          "default" = [ "rev-mappings" ];
        };
        resolvedDefaultFeatures = [ "default" "rev-mappings" ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.3.6";
        edition = "2018";
        sha256 = "198n4hfpq0qcxf275l6fpzh7b9cl7ck2xs6pjgpds74bazv9yrxa";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler32";
            packageId = "adler32";
          }
        ];
        
      };
      "mio" = rec {
        crateName = "mio";
        version = "0.6.22";
        edition = "2015";
        sha256 = "0c64razhyam9892kgxsshmkqs6smrd11087nxb48nhjn4q4lgqzw";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "fuchsia-zircon";
            packageId = "fuchsia-zircon";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "fuchsia-zircon-sys";
            packageId = "fuchsia-zircon-sys";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
            target = { target, features }: target."windows";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "miow";
            packageId = "miow";
            target = { target, features }: target."windows";
          }
          {
            name = "net2";
            packageId = "net2";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
            target = { target, features }: target."windows";
          }
        ];
        features = {
          "default" = [ "with-deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" "with-deprecated" ];
      };
      "mio-uds" = rec {
        crateName = "mio-uds";
        version = "0.6.8";
        edition = "2015";
        sha256 = "1w36w09gd8as1mah80wdy0kgpshmphmljj68gij34hvdnag6kjxg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "iovec";
            packageId = "iovec";
            target = { target, features }: target."unix";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "mio";
            packageId = "mio";
            target = { target, features }: target."unix";
          }
        ];
        
      };
      "miow" = rec {
        crateName = "miow";
        version = "0.2.1";
        edition = "2015";
        sha256 = "06g9b8sqlh5gxakwqq4rrib07afwanfnxgxajrldwcgk3hxjy7wc";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
          }
          {
            name = "net2";
            packageId = "net2";
            usesDefaultFeatures = false;
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
          {
            name = "ws2_32-sys";
            packageId = "ws2_32-sys";
          }
        ];
        
      };
      "native-tls" = rec {
        crateName = "native-tls";
        version = "0.2.4";
        edition = "2015";
        sha256 = "0bcbqm8gpm5azlp8rwznhrfk3ngikr041fj883lmw3g9dz08h39b";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!((target."os" == "windows") || (target."os" == "macos") || (target."os" == "ios")));
          }
          {
            name = "openssl";
            packageId = "openssl";
            target = { target, features }: (!((target."os" == "windows") || (target."os" == "macos") || (target."os" == "ios")));
          }
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: (!((target."os" == "windows") || (target."os" == "macos") || (target."os" == "ios")));
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            target = { target, features }: (!((target."os" == "windows") || (target."os" == "macos") || (target."os" == "ios")));
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
        ];
        features = {
          "vendored" = [ "openssl/vendored" ];
        };
      };
      "net2" = rec {
        crateName = "net2";
        version = "0.2.34";
        edition = "2015";
        sha256 = "1xsay6x9fqkq34mfyfyavkrk29z7j4wb9fzw5as4yw3nmhcck9rb";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."os" == "redox") || target."unix" || (target."os" == "wasi"));
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "handleapi" "winsock2" "ws2def" "ws2ipdef" "ws2tcpip" ];
          }
        ];
        features = {
          "default" = [ "duration" ];
        };
        resolvedDefaultFeatures = [ "default" "duration" ];
      };
      "nodrop" = rec {
        crateName = "nodrop";
        version = "0.1.14";
        edition = "2015";
        sha256 = "1fz1v9r8ijacf0hlq0pdv5l9mz8vgqg1snmhvpjmi9aci1b4mvvj";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_union" = [ "nodrop-union" ];
        };
      };
      "nom 4.2.3" = rec {
        crateName = "nom";
        version = "4.2.3";
        edition = "2015";
        sha256 = "1mkvby8b4m61p4g1px0pwr58yfkphyp1jcfbp4qfp7l6iqdaklia";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check 0.1.5";
          }
        ];
        features = {
          "default" = [ "std" ];
          "regexp" = [ "regex" ];
          "regexp_macros" = [ "regexp" "lazy_static" ];
          "std" = [ "alloc" "memchr/use_std" ];
          "verbose-errors" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "nom 5.1.1" = rec {
        crateName = "nom";
        version = "5.1.1";
        edition = "2018";
        sha256 = "1mma0q5bzgzbyyjc2w8z0wvff08yaaf28lhmnsj2slwpv99i4iqb";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "lexical-core";
            packageId = "lexical-core";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check 0.9.1";
          }
        ];
        features = {
          "default" = [ "std" "lexical" ];
          "lexical" = [ "lexical-core" ];
          "regexp" = [ "regex" ];
          "regexp_macros" = [ "regexp" "lazy_static" ];
          "std" = [ "alloc" "memchr/use_std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "lexical" "lexical-core" "std" ];
      };
      "num-bigint" = rec {
        crateName = "num-bigint";
        version = "0.2.6";
        edition = "2015";
        sha256 = "015k3wixdi4w698sappvy43pf8bvkw0f88xplmdgc3zfk2cpy309";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.42";
        edition = "2015";
        sha256 = "1fpw8yr9xwsf3qrh91rm7mzqaiwlc2dmnalsxv9pr9w1klpacviz";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.11";
        edition = "2015";
        sha256 = "15khrlm1bra50nd48ijl1vln13m9xg4fxzghf28jp16ic5zf8ay6";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.13.0";
        edition = "2015";
        sha256 = "1cv6yxhz2zbnwn8pn1yn8grg7zsnd523947fby41a737aqvryj85";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (((target."arch" == "x86_64") || (target."arch" == "aarch64")) && (target."os" == "hermit"));
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.3.1";
        edition = "2018";
        sha256 = "0nyf4659py8ccnrrwdvw242h3j3qlrw6zi5gsjb9bjbm0n0h3imi";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "openssl" = rec {
        crateName = "openssl";
        version = "0.10.29";
        edition = "2015";
        sha256 = "1p8bybxjkcf8p49jk0lywa10qa1x4f5bdmc5dadgbi5l9igxirnf";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
          }
        ];
        features = {
          "vendored" = [ "openssl-sys/vendored" ];
        };
      };
      "openssl-probe" = rec {
        crateName = "openssl-probe";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1pijrdifgsdwd45b08c2g0dsmnhz7c3kmagb70839ngrd7d29bvp";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "openssl-sys" = rec {
        crateName = "openssl-sys";
        version = "0.9.55";
        edition = "2015";
        sha256 = "1n55z6jqmwflp5ahnh9893i5b0v0f4gd3rgr4cijw3qah5yhj5vp";
        build = "build/main.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            target = {target, features}: (target."env" == "msvc");
          }
        ];
        features = {
          "vendored" = [ "openssl-src" ];
        };
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.10.2";
        edition = "2018";
        sha256 = "0pjhcbyk6n0g6jsr6s9nf4x8wribm1b2yf8fgc8drbqa77mh99yk";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.7.2";
        edition = "2018";
        sha256 = "18s0cw5y32447c06fhg2mp3xfng22fn1h9fpx3il98sbimv7r36m";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        features = {
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
        };
      };
      "pem" = rec {
        crateName = "pem";
        version = "0.7.0";
        edition = "2018";
        sha256 = "14wpql0znpxrg6bq6lmp9kvbs9v24l0zzqqf3yj5d9spqxh1fn51";
        authors = [
          "Jonathan Creekmore <jonathan@thecreekmores.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "regex";
            packageId = "regex";
          }
        ];
        
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.1.0";
        edition = "2015";
        sha256 = "0bp3zrsk3kr47fbpipyczidbbx4g54lzxdm77ni1i3qws10mdzfl";
        libPath = "lib.rs";
        authors = [
          "The rust-url developers"
        ];
        
      };
      "pin-project" = rec {
        crateName = "pin-project";
        version = "0.4.13";
        edition = "2018";
        sha256 = "0parsaiim2nis1cq50d6rsq0w8lcfsyln8y7k2agjhmvnnzvzhw2";
        authors = [
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "pin-project-internal";
            packageId = "pin-project-internal";
            usesDefaultFeatures = false;
          }
        ];
        
      };
      "pin-project-internal" = rec {
        crateName = "pin-project-internal";
        version = "0.4.13";
        edition = "2018";
        sha256 = "0qwgs8xhlc5x5vngh2hqmg6s66nzp22v09jm04n5c67vvi4n9gyc";
        procMacro = true;
        authors = [
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" "visit-mut" ];
          }
        ];
        
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0zznprlm9yhagpbxj6c1xqhb3ns894f1gxq8c47jwjbqppp5wl7p";
        authors = [
          "Taiki Endo <te316e89@gmail.com>"
        ];
        
      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];
        
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.17";
        edition = "2015";
        sha256 = "0xynnaxdv0gzadlw4h79j855k0q7rj4zb9xb1vk00nc6ss559nh5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.6";
        edition = "2018";
        sha256 = "06zs492wbms7j5qhy58cs3976c7kyc47rx0d6fn63rgvp580njbl";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        features = {
          "default" = [ "std" "simd" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "pq-sys" = rec {
        crateName = "pq-sys";
        version = "0.4.6";
        edition = "2015";
        sha256 = "1npz9756283pjq3lcpwss8xh1rw4sx8f6dz8cxdg90h5bbp5xhka";
        libName = "pq_sys";
        authors = [
          "Sean Griffin <sean@seantheprogrammer.com>"
        ];
        buildDependencies = [
          {
            name = "vcpkg";
            packageId = "vcpkg";
            target = {target, features}: (target."env" == "msvc");
          }
        ];
        
      };
      "proc-macro-hack" = rec {
        crateName = "proc-macro-hack";
        version = "0.5.15";
        edition = "2018";
        sha256 = "0qqbfm1byabjkph56r2rlvv4cliz4960j6hav3ljazyjqvkryr8d";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        
      };
      "proc-macro-nested" = rec {
        crateName = "proc-macro-nested";
        version = "0.1.4";
        edition = "2015";
        sha256 = "15664z2pjnn7ajpbrir4wh4c16jxz4i8r46y73n2kvfkz6an154f";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.12";
        edition = "2018";
        sha256 = "06bk2n4iqj7m9kgrcgvbd21k9aq0lxb184bc2mjl5r7f91pwywl8";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quick-error" = rec {
        crateName = "quick-error";
        version = "1.2.3";
        edition = "2015";
        sha256 = "1q6za3v78hsspisc197bg3g7rpc989qycy8ypr8ap8igv10ikl51";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
        ];
        
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.4";
        edition = "2018";
        sha256 = "19rj891yvmlc8w5pg7shwfjbdz9cwpz6n4q5nz7fiiazz874n7sc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "r2d2" = rec {
        crateName = "r2d2";
        version = "0.8.8";
        edition = "2018";
        sha256 = "1bw50kp6im2asi52bj9sb921xkjb2xaqwzbn8254m3ilal4f95ql";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "scheduled-thread-pool";
            packageId = "scheduled-thread-pool";
          }
        ];
        
      };
      "rand" = rec {
        crateName = "rand";
        version = "0.7.3";
        edition = "2018";
        sha256 = "00sdaimkbz491qgi6qxkv582yivl32m2jd401kzbn94vsiwicsva";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            rename = "getrandom_package";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."os" == "emscripten"));
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc";
            target = { target, features }: (target."os" == "emscripten");
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "getrandom" = [ "getrandom_package" "rand_core/getrandom" ];
          "nightly" = [ "simd_support" ];
          "simd_support" = [ "packed_simd" ];
          "small_rng" = [ "rand_pcg" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "stdweb" = [ "getrandom_package/stdweb" ];
          "wasm-bindgen" = [ "getrandom_package/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "getrandom_package" "libc" "std" ];
      };
      "rand_chacha" = rec {
        crateName = "rand_chacha";
        version = "0.2.2";
        edition = "2018";
        sha256 = "00il36fkdbsmpr99p9ksmmp6dn1md7rmnwmz0rr77jbrca2yvj7l";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "default" = [ "std" "simd" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core" = rec {
        crateName = "rand_core";
        version = "0.5.1";
        edition = "2018";
        sha256 = "06bdvx08v3rkz451cm7z59xwwqn1rkfh6v9ay77b14f8dwlybgch";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
        ];
        features = {
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_hc" = rec {
        crateName = "rand_hc";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0g31sqwpmsirdlwr0svnacr4dbqyz339im4ssl9738cjgfpjjcfa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.1.56";
        edition = "2015";
        sha256 = "110y7dyfm2vci4x5vk7gr0q551dvp31npl99fnsx2fb17wzwcf94";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.3.7";
        edition = "2015";
        sha256 = "14knp8k0r89lf6qanv0nh93br09q8lksd0hvf561kqr2941hy0m6";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            usesDefaultFeatures = false;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-inline" "perf-literal" ];
          "perf-cache" = [ "thread_local" ];
          "perf-literal" = [ "aho-corasick" "memchr" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "aho-corasick" "default" "memchr" "perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "std" "thread_local" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-syntax" = rec {
        crateName = "regex-syntax";
        version = "0.6.17";
        edition = "2015";
        sha256 = "1blmlgzcg7in3kcxqabpfzzrbnamr2i671flbrmlqhfps5bvvrbz";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "remove_dir_all" = rec {
        crateName = "remove_dir_all";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0bkrlyg26mgizpiy1yb2hhpgscxcag8r5fnckqsvk25608vzm0sa";
        authors = [
          "Aaronepower <theaaronepower@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "errhandlingapi" "winerror" "fileapi" "winbase" ];
          }
        ];
        
      };
      "reqwest" = rec {
        crateName = "reqwest";
        version = "0.10.4";
        edition = "2018";
        sha256 = "1qhlasw182dm5x7rvbp92p4pfczmgwqjlpzwvjlhjlgcvm4ixf02";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."arch" == "wasm32"));
            features = [ "tcp" ];
          }
          {
            name = "hyper-tls";
            packageId = "hyper-tls";
            optional = true;
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "mime";
            packageId = "mime";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "mime_guess";
            packageId = "mime_guess";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "native-tls";
            packageId = "native-tls";
            rename = "native-tls-crate";
            optional = true;
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "time";
            packageId = "time";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."arch" == "wasm32"));
            features = [ "tcp" "time" ];
          }
          {
            name = "tokio-tls";
            packageId = "tokio-tls";
            optional = true;
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (target."arch" == "wasm32");
            features = [ "serde-serialize" ];
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (target."arch" == "wasm32");
            features = [ "Headers" "Request" "RequestInit" "RequestMode" "Response" "Window" ];
          }
          {
            name = "winreg";
            packageId = "winreg";
            target = { target, features }: target."windows";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
            target = {target, features}: (!(target."arch" == "wasm32"));
            features = [ "tcp" "stream" ];
          }
          {
            name = "serde";
            packageId = "serde";
            target = {target, features}: (!(target."arch" == "wasm32"));
            features = [ "derive" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {target, features}: (!(target."arch" == "wasm32"));
            features = [ "macros" ];
          }
        ];
        features = {
          "blocking" = [ "futures-util/io" "tokio/rt-threaded" "tokio/rt-core" "tokio/sync" ];
          "brotli" = [ "async-compression" "async-compression/brotli" ];
          "cookies" = [ "cookie_crate" "cookie_store" ];
          "default" = [ "default-tls" ];
          "default-tls" = [ "hyper-tls" "native-tls-crate" "__tls" "tokio-tls" ];
          "gzip" = [ "async-compression" "async-compression/gzip" ];
          "json" = [ "serde_json" ];
          "native-tls" = [ "default-tls" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" ];
          "rustls-tls" = [ "hyper-rustls" "tokio-rustls" "webpki-roots" "rustls" "__tls" ];
          "socks" = [ "tokio-socks" ];
          "trust-dns" = [ "trust-dns-resolver" ];
        };
        resolvedDefaultFeatures = [ "__tls" "blocking" "default" "default-tls" "hyper-tls" "json" "native-tls-crate" "serde_json" "tokio-tls" ];
      };
      "resolv-conf" = rec {
        crateName = "resolv-conf";
        version = "0.6.3";
        edition = "2015";
        sha256 = "0jlzifww1h7j23jnjj49xz8q0fpd9rqpd0ks8c4y651vgw9lx0qi";
        libName = "resolv_conf";
        authors = [
          "paul@colomiets.name"
        ];
        dependencies = [
          {
            name = "hostname";
            packageId = "hostname";
            optional = true;
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        features = {
          "system" = [ "hostname" ];
        };
        resolvedDefaultFeatures = [ "hostname" "system" ];
      };
      "ring" = rec {
        crateName = "ring";
        version = "0.16.13";
        edition = "2018";
        sha256 = "15n1rbna66jsllrxgpmhdhrm3bg2h4g478dlcns287spfjp1cdbh";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."os" == "android") || (target."os" == "linux"));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."os" == "android") || (target."os" == "freebsd") || (target."os" == "linux") || (target."os" == "netbsd") || (target."os" == "openbsd") || (target."os" == "solaris"));
            features = [ "std" ];
          }
          {
            name = "spin";
            packageId = "spin";
            usesDefaultFeatures = false;
            target = { target, features }: (((target."arch" == "aarch64") || (target."arch" == "arm") || (target."arch" == "x86") || (target."arch" == "x86_64")) && (!(target."os" == "ios")));
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."arch" == "wasm32") && (target."vendor" == "unknown") && (target."os" == "unknown") && (target."env" == ""));
            features = [ "Crypto" "Window" ];
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            usesDefaultFeatures = false;
            target = { target, features }: (target."os" == "windows");
            features = [ "ntsecapi" "wtypesbase" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {target, features}: (target."unix" || target."windows");
          }
        ];
        features = {
          "default" = [ "alloc" "dev_urandom_fallback" ];
          "dev_urandom_fallback" = [ "once_cell" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "dev_urandom_fallback" "once_cell" "std" ];
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.16";
        edition = "2015";
        sha256 = "10qp42sl1wrdbgbbh8rnay2grm976z7hqgz32c4y09l1c071qsac";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.2.3";
        edition = "2015";
        sha256 = "02h3x57lcr8l2pm0a645s9whdh33pn5cnrwvn5cb57vcrc53x3hk";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];
        
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.4";
        edition = "2015";
        sha256 = "1qa1g46584i1qvfpn8a96b2f1p4hslkfzrky7zmyyc24qqmn2ggd";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
        };
      };
      "sass-rs" = rec {
        crateName = "sass-rs";
        version = "0.2.2";
        edition = "2015";
        crateBin = [];
        sha256 = "1gba93p6y9pc5nbsx31k2kfd5ah92i0ar1qij5cz6lshwp3ggg6a";
        libName = "sass_rs";
        authors = [
          "Marius Seritan <github@seritan.net>"
          "Vincent Prouillet <prouillet.vincent@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "sass-sys";
            packageId = "sass-sys";
          }
        ];
        
      };
      "sass-sys" = rec {
        crateName = "sass-sys";
        version = "0.4.19";
        edition = "2015";
        sha256 = "0v926q8lasf4mi712xaqknr40fizjgacxmpmdp3fd7x1iwy4sifx";
        authors = [
          "Marius Seritan <github@seritan.net>"
          "Vincent Prouillet <prouillet.vincent@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            target = {target, features}: (target."env" == "msvc");
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        
      };
      "schannel" = rec {
        crateName = "schannel";
        version = "0.1.18";
        edition = "2015";
        sha256 = "06fdagm55j6g26bv4jsffk1ak7v5wbyyfz9dxqhi735x62qjb703";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Steffen Butzer <steffen.butzer@outlook.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            features = [ "lmcons" "minschannel" "securitybaseapi" "schannel" "sspi" "sysinfoapi" "timezoneapi" "winbase" "wincrypt" "winerror" ];
          }
        ];
        
      };
      "scheduled-thread-pool" = rec {
        crateName = "scheduled-thread-pool";
        version = "0.2.4";
        edition = "2018";
        sha256 = "1xpvb1s7zzyml92vrijbmfc3wprlmglg3813b77mypldz3yxg209";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
        ];
        
      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1kbqm85v43rq92vx7hfiay6pmcga03vrjbbfwqpyj3pwsg3b16nj";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "security-framework" = rec {
        crateName = "security-framework";
        version = "0.4.3";
        edition = "2015";
        sha256 = "0806xg2ks76ww8kb666lh3gy0nlgmw6fv7av8b6lahb54n81ncrz";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" "security-framework-sys/OSX_10_10" ];
          "OSX_10_11" = [ "OSX_10_10" "security-framework-sys/OSX_10_11" ];
          "OSX_10_12" = [ "OSX_10_11" "security-framework-sys/OSX_10_12" ];
          "OSX_10_13" = [ "OSX_10_12" "security-framework-sys/OSX_10_13" "alpn" "session-tickets" ];
          "OSX_10_9" = [ "security-framework-sys/OSX_10_9" ];
        };
      };
      "security-framework-sys" = rec {
        crateName = "security-framework-sys";
        version = "0.4.3";
        edition = "2015";
        sha256 = "01c4fkj78frz6kz9vri1am2pbkz52raxws5lbrli5xajjbci3gqp";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" ];
          "OSX_10_11" = [ "OSX_10_10" ];
          "OSX_10_12" = [ "OSX_10_11" ];
          "OSX_10_13" = [ "OSX_10_12" ];
        };
      };
      "semver" = rec {
        crateName = "semver";
        version = "0.9.0";
        edition = "2015";
        sha256 = "00q4lkcj0rrgbhviv9sd4p6qmdsipkwkbra7rh11jrhq5kpvjzhx";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "semver-parser";
            packageId = "semver-parser";
          }
        ];
        features = {
          "ci" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "semver-parser" = rec {
        crateName = "semver-parser";
        version = "0.7.0";
        edition = "2015";
        sha256 = "18vhypw6zgccnrlm5ps1pwa0khz7ry927iznpr88b87cagr1v2iq";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
        ];
        
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.106";
        edition = "2015";
        sha256 = "169kg1px2k0hlxziiikdwy42wnrs2gjbvsv7yxygcwi08736mprn";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "serde_derive" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.106";
        edition = "2015";
        sha256 = "0v7a2rkpx9hi70pv2wr2h0h07rgmr7gi37v0s4dn5f2gpwx9wm4y";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.52";
        edition = "2018";
        sha256 = "1pcyg6xhca5giyh9hnxph201bly1vrgh4ygbk8kklyjvs274r2d7";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "preserve_order" = [ "indexmap" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_urlencoded" = rec {
        crateName = "serde_urlencoded";
        version = "0.6.1";
        edition = "2015";
        sha256 = "15rcwfkff0md5i231m2ym5756ksw1mkh5b5g2rw72wsc5mzdgicy";
        authors = [
          "Anthony Ramine <n.oxyde@gmail.com>"
        ];
        dependencies = [
          {
            name = "dtoa";
            packageId = "dtoa";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        
      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.6.0";
        edition = "2015";
        sha256 = "03gs2q4m67rn2p8xcdfxhip6mpgahdwm12bnb3vh90ahv9grhy95";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        features = {
        };
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0haz828bif1lbp3alx17zkcy5hwy15bbpmvks72j8iznx7npix4l";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "arc-swap";
            packageId = "arc-swap";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "simple_asn1" = rec {
        crateName = "simple_asn1";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0676jbw1h7pjv8s0mlhq9dih6ahjn5j2mhnnjw64y9b5f6xfq99b";
        authors = [
          "Adam Wick <awick@uhsure.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];
        
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1y59xsa27jk84sxzswjk60xcjf8b4fm5960jwpznrrcmasyva4f1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.4.0";
        edition = "2018";
        sha256 = "1r2yxn8qamzb1jn91zbphl0x49scbfxxjr629ql58mv1w5w5djy7";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
        };
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.3.12";
        edition = "2018";
        sha256 = "062921z4yc29mwzxx982nwd1kb8lnfqyvhncydbf7p3pys9qf203";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            target = { target, features }: (target."unix" || (target."os" == "redox"));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" || (target."os" == "redox"));
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "handleapi" "ws2def" "ws2ipdef" "ws2tcpip" "minwindef" ];
          }
        ];
        features = {
        };
      };
      "spin" = rec {
        crateName = "spin";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0b84m6dbzrwf2kxylnw82d3dr8w06av7rfkr8s85fb5f43rwyqvf";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
        ];
        
      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "0.3.4";
        edition = "2015";
        sha256 = "1lw33i89888yb3x29c6dv4mrkg3534n0rlg3r7qzh4p58xmv6gkz";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "stdweb" = rec {
        crateName = "stdweb";
        version = "0.4.20";
        edition = "2015";
        sha256 = "1md14n9rzxzdskz3hpgln8vxfwqsw2cswc0f5nslh4r82rmlj8nh";
        authors = [
          "Jan Bujak <j@exia.io>"
        ];
        dependencies = [
          {
            name = "discard";
            packageId = "discard";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "stdweb-derive";
            packageId = "stdweb-derive";
          }
          {
            name = "stdweb-internal-macros";
            packageId = "stdweb-internal-macros";
          }
          {
            name = "stdweb-internal-runtime";
            packageId = "stdweb-internal-runtime";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ((target."arch" == "wasm32") && (target."vendor" == "unknown") && (target."os" == "unknown") && (!target."cargo_web"));
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "default" = [ "serde" "serde_json" ];
          "experimental_features_which_may_break_on_minor_version_bumps" = [ "futures-support" ];
          "futures-support" = [ "futures-core-preview" "futures-channel-preview" "futures-util-preview" "futures-executor-preview" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "serde_json" ];
      };
      "stdweb-derive" = rec {
        crateName = "stdweb-derive";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1vsh7g0gaxn4kxqq3knhymdn02p2pfxmnd2j0vplpj6c1yj60yn8";
        procMacro = true;
        authors = [
          "Jan Bujak <j@exia.io>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" ];
          }
        ];
        
      };
      "stdweb-internal-macros" = rec {
        crateName = "stdweb-internal-macros";
        version = "0.2.9";
        edition = "2015";
        sha256 = "049fq8fl5ny9l5if2qv7kxwng7g6ns95h4fbm3zx360dmpv5zyjq";
        procMacro = true;
        authors = [
          "Jan Bujak <j@exia.io>"
        ];
        dependencies = [
          {
            name = "base-x";
            packageId = "base-x";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "clone-impls" ];
          }
        ];
        
      };
      "stdweb-internal-runtime" = rec {
        crateName = "stdweb-internal-runtime";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1h0nkppb4r8dbrbms2hw9n5xdcs392m0r5hj3b6lsx3h6fx02dr1";
        authors = [
          "Jan Bujak <j@exia.io>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0sjsm7hrvjdifz661pjxq5w4hf190hx53fra8dfvamacvff139cf";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];
        
      };
      "syn" = rec {
        crateName = "syn";
        version = "1.0.19";
        edition = "2018";
        sha256 = "1rssizq02w27kc1jy6051w0c1kjy8s435bhl4bk6xckvd5qamrg8";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "quote" "visit" "visit-mut" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.12.3";
        edition = "2018";
        sha256 = "0igmc5fzpk6fg7kgff914j05lbpc6ai2wmji312v2h8vvjhnwrb7";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.1.0";
        edition = "2018";
        sha256 = "1a9cfdqw70n7bcnkx05aih9xdba8lqazmqlkjpkmn2la6gcj8vks";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <jasonaw0@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "remove_dir_all";
            packageId = "remove_dir_all";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "fileapi" "handleapi" "winbase" ];
          }
        ];
        
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.1.0";
        edition = "2018";
        sha256 = "0pyp8vc0gx7124y80ixdl6plbfn1yjhw04i875k5fz2dk8lglsxv";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "textwrap" = rec {
        crateName = "textwrap";
        version = "0.11.0";
        edition = "2015";
        sha256 = "0q5hky03ik3y50s9sz25r438bc4nwhqc6dqwynv4wylc807n29nk";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        
      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.16";
        edition = "2018";
        sha256 = "0q0v144z9w3nbhczpjj44nma2nql5wabzizbirb0s3yx9ap1sani";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];
        
      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.16";
        edition = "2018";
        sha256 = "0s8jaa7i6ixqsllzx50dc917h7pa8s4pcszc83c2yimarb0y0d1z";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        
      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.0.1";
        edition = "2015";
        sha256 = "054vlrr1vsdy1h4b7n99mr24pnj8928ig9qwzg36wnkld4dns36l";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        
      };
      "threadpool" = rec {
        crateName = "threadpool";
        version = "1.8.0";
        edition = "2015";
        sha256 = "0rkx0wzaw9v958ckiliwl42m2j7c59j3r5vdj6kda5bw8j2f3np8";
        authors = [
          "The Rust Project Developers"
          "Corey Farwell <coreyf@rwell.org>"
          "Stefan Schindler <dns2utf8@estada.ch>"
        ];
        dependencies = [
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];
        
      };
      "time" = rec {
        crateName = "time";
        version = "0.1.43";
        edition = "2015";
        sha256 = "0f14wrgxj7ya2v4msg5mni7046bsm2angm7cn3pd3yv04gpm12na";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "minwinbase" "minwindef" "ntdef" "profileapi" "sysinfoapi" "timezoneapi" ];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            features = [ "std" "processthreadsapi" "winbase" ];
          }
        ];
        
      };
      "tokio" = rec {
        crateName = "tokio";
        version = "0.2.20";
        edition = "2018";
        sha256 = "1ca7xjp1cxj71cn92dhjs5rhpdv5wv3cdsawb8sg0dhsxdqdbh85";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "iovec";
            packageId = "iovec";
            optional = true;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: target."unix";
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "mio";
            packageId = "mio";
            optional = true;
          }
          {
            name = "mio-uds";
            packageId = "mio-uds";
            optional = true;
            target = { target, features }: target."unix";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = { target, features }: target."unix";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: target."windows";
          }
        ];
        features = {
          "blocking" = [ "rt-core" ];
          "dns" = [ "rt-core" ];
          "fs" = [ "rt-core" "io-util" ];
          "full" = [ "blocking" "dns" "fs" "io-driver" "io-util" "io-std" "macros" "net" "process" "rt-core" "rt-util" "rt-threaded" "signal" "stream" "sync" "time" ];
          "io-driver" = [ "mio" "lazy_static" ];
          "io-std" = [ "rt-core" ];
          "io-util" = [ "memchr" ];
          "macros" = [ "tokio-macros" ];
          "net" = [ "dns" "tcp" "udp" "uds" ];
          "process" = [ "io-driver" "libc" "mio-named-pipes" "signal" "winapi/consoleapi" "winapi/minwindef" "winapi/threadpoollegacyapiset" "winapi/winerror" ];
          "rt-threaded" = [ "num_cpus" "rt-core" ];
          "signal" = [ "io-driver" "lazy_static" "libc" "mio-uds" "signal-hook-registry" "winapi/consoleapi" "winapi/minwindef" ];
          "stream" = [ "futures-core" ];
          "sync" = [ "fnv" ];
          "tcp" = [ "io-driver" "iovec" ];
          "time" = [ "slab" ];
          "udp" = [ "io-driver" ];
          "uds" = [ "io-driver" "mio-uds" "libc" ];
        };
        resolvedDefaultFeatures = [ "blocking" "default" "fnv" "futures-core" "io-driver" "io-util" "iovec" "lazy_static" "libc" "memchr" "mio" "mio-uds" "num_cpus" "rt-core" "rt-threaded" "rt-util" "signal" "signal-hook-registry" "slab" "stream" "sync" "tcp" "time" "udp" "uds" "winapi" ];
      };
      "tokio-openssl" = rec {
        crateName = "tokio-openssl";
        version = "0.4.0";
        edition = "2018";
        sha256 = "15751d47984ncvllagz35ldl10ifr8555wixvsg6k3i0yk2hhjrw";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "openssl";
            packageId = "openssl";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        
      };
      "tokio-tls" = rec {
        crateName = "tokio-tls";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0hv375949532p32d0w6bm2f6d3r0d00mcdzqjjqlzcmkszyg8w4s";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "native-tls";
            packageId = "native-tls";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "stream" "rt-core" "io-util" "net" ];
          }
        ];
        
      };
      "tokio-util 0.2.0" = rec {
        crateName = "tokio-util";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0c39s4y0kvzkyarn1f9s8khqyajiqn7m4cjsa208f87ch88sa7ap";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "full" = [ "codec" "udp" ];
          "udp" = [ "tokio/udp" ];
        };
        resolvedDefaultFeatures = [ "codec" "default" "full" "udp" ];
      };
      "tokio-util 0.3.1" = rec {
        crateName = "tokio-util";
        version = "0.3.1";
        edition = "2018";
        sha256 = "16b48dl6sbc9x944jgjvsd65ab1w2c2qcziddbrbwv1b3y4l50my";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "codec" = [ "tokio/stream" ];
          "compat" = [ "futures-io" ];
          "full" = [ "codec" "udp" "compat" ];
          "udp" = [ "tokio/udp" ];
        };
        resolvedDefaultFeatures = [ "codec" "default" ];
      };
      "toml" = rec {
        crateName = "toml";
        version = "0.5.6";
        edition = "2018";
        sha256 = "06n7j8z63hj6g0kj2x6sqwxnm4q3s0q5d873bdk41vqy1cb2vjgz";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "tower-service" = rec {
        crateName = "tower-service";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0q4q53w82w1wd71x7vbspg2l3jicb6al2w1qdwxmnjrz8jzvd1z9";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        
      };
      "trust-dns-proto" = rec {
        crateName = "trust-dns-proto";
        version = "0.18.0-alpha.2";
        edition = "2018";
        sha256 = "0gs15ckm4d4s59jqmm35lbpx7mvylrk8hiialpnga6d9p0m3lzra";
        libName = "trust_dns_proto";
        authors = [
          "Benjamin Fry <benjaminfry@me.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "enum-as-inner";
            packageId = "enum-as-inner";
          }
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "socket2";
            packageId = "socket2";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "time" "udp" "tcp" ];
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "default" = [ "tokio-compat" ];
          "dnssec" = [ "data-encoding" ];
          "dnssec-openssl" = [ "dnssec" "openssl" ];
          "dnssec-ring" = [ "dnssec" "ring" ];
          "mdns" = [ "socket2/reuseport" ];
          "serde-config" = [ "serde" ];
          "tokio-compat" = [ "tokio" ];
        };
        resolvedDefaultFeatures = [ "default" "tokio" "tokio-compat" ];
      };
      "trust-dns-resolver" = rec {
        crateName = "trust-dns-resolver";
        version = "0.18.0-alpha.2";
        edition = "2018";
        sha256 = "0bsal2vz7q3fqdyxa0j1rbbh1hm8mxxv7mf62hjqnvr25d8b343g";
        libName = "trust_dns_resolver";
        authors = [
          "Benjamin Fry <benjaminfry@me.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "ipconfig";
            packageId = "ipconfig";
            target = { target, features }: target."windows";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "lru-cache";
            packageId = "lru-cache";
          }
          {
            name = "resolv-conf";
            packageId = "resolv-conf";
            features = [ "system" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "rt-core" ];
          }
          {
            name = "trust-dns-proto";
            packageId = "trust-dns-proto";
          }
        ];
        features = {
          "default" = [ "tokio-compat" ];
          "dns-over-https-rustls" = [ "trust-dns-https" "dns-over-rustls" "dns-over-https" ];
          "dns-over-native-tls" = [ "dns-over-tls" "trust-dns-native-tls" ];
          "dns-over-openssl" = [ "dns-over-tls" "trust-dns-openssl" ];
          "dns-over-rustls" = [ "dns-over-tls" "rustls" "trust-dns-rustls" "webpki-roots" ];
          "dnssec-openssl" = [ "dnssec" "trust-dns-proto/dnssec-openssl" ];
          "dnssec-ring" = [ "dnssec" "trust-dns-proto/dnssec-ring" ];
          "mdns" = [ "trust-dns-proto/mdns" ];
          "serde-config" = [ "serde" "trust-dns-proto/serde-config" ];
          "tokio-compat" = [ "tokio" "trust-dns-proto/tokio-compat" ];
        };
        resolvedDefaultFeatures = [ "default" "tokio" "tokio-compat" ];
      };
      "try-lock" = rec {
        crateName = "try-lock";
        version = "0.2.2";
        edition = "2015";
        sha256 = "10p36rx6pqi9d0zr876xa8vksx2m66ha45myakl50rn08dxyn176";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        
      };
      "unicase" = rec {
        crateName = "unicase";
        version = "2.6.0";
        edition = "2015";
        sha256 = "1xmlbink4ycgxrkjspp0mf7pghcx4m7vxq7fpfm04ikr2zk7pwsh";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check 0.9.1";
          }
        ];
        features = {
        };
      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.4";
        edition = "2015";
        sha256 = "1malx8ljgm7v1gbaazkn7iicy5wj0bwcyadj3l727a38ch6bvwj9";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
        ];
        features = {
          "flame_it" = [ "flame" "flamer" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.12";
        edition = "2015";
        sha256 = "195gb4fzlgg4g9cv6w057ncpmvvnx30r00w9hj114knhmlmm6yal";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.6.0";
        edition = "2015";
        sha256 = "1h7d48mzpi8hwf5cvnq07warkv86pvapzzzf32hvbjsk20yiagp8";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.7";
        edition = "2015";
        sha256 = "0yflmxkxmm89ckrb3sz58whn491aycrj8cxra0hzzlb72x9rvana";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0z09fn515xm7zyr0mmdyxa9mx2f7azcpv74pqmg611iralwpcvl2";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "untrusted" = rec {
        crateName = "untrusted";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0jkbqaj9d3v5a91pp3wp9mffvng1nhycx6sh4qkdd9qyr62ccmm1";
        libPath = "src/untrusted.rs";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        
      };
      "url" = rec {
        crateName = "url";
        version = "2.1.1";
        edition = "2015";
        sha256 = "1jw7cw8br4xvjb92ddrrh1r7jvqhyhiknnnfpgq9np63fs24m7c2";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];
        
      };
      "uuid" = rec {
        crateName = "uuid";
        version = "0.8.1";
        edition = "2018";
        sha256 = "049w16qwk3d3b9cmpgvd7fvcnwgs75l8rlsagh06w7ga9dm2zplz";
        authors = [
          "Ashley Mannix<ashleymannix@live.com.au>"
          "Christopher Armstrong"
          "Dylan DPC<dylan.dpc@gmail.com>"
          "Hunar Roop Kahlon<hunar.roop@gmail.com>"
        ];
        dependencies = [
          {
            name = "rand";
            packageId = "rand";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "guid" = [ "winapi" ];
          "stdweb" = [ "rand/stdweb" ];
          "v3" = [ "md5" ];
          "v4" = [ "rand" ];
          "v5" = [ "sha1" ];
          "wasm-bindgen" = [ "rand/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "default" "rand" "std" "v4" ];
      };
      "v_escape" = rec {
        crateName = "v_escape";
        version = "0.7.4";
        edition = "2018";
        sha256 = "19kdgk3iqzd295h9x7x7sbb5is3phw9v6zwyxcyqdl5m0wf102v6";
        authors = [
          "Juan Aguilar Santillana <mhpoin@gmail.com>"
        ];
        dependencies = [
          {
            name = "v_escape_derive";
            packageId = "v_escape_derive";
          }
        ];
        
      };
      "v_escape_derive" = rec {
        crateName = "v_escape_derive";
        version = "0.5.6";
        edition = "2018";
        sha256 = "1bk7qhh2wrv6pk7ir51f2mxzhzcj79ypl24b316vdi9zpha2mjn2";
        procMacro = true;
        authors = [
          "Juan Aguilar Santillana <mhpoin@gmail.com>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom 4.2.3";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "visit" ];
          }
        ];
        
      };
      "v_htmlescape" = rec {
        crateName = "v_htmlescape";
        version = "0.4.5";
        edition = "2018";
        sha256 = "0hbyx7r922q0czpb4f39g9kmdg3qmid7vfmn9x8lgw4c1nf96gp3";
        authors = [
          "Juan Aguilar Santillana <mhpoin@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "v_escape";
            packageId = "v_escape";
          }
        ];
        
      };
      "vcpkg" = rec {
        crateName = "vcpkg";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0s1ijdrsg6917imja2hb07l0z4vbx7ydm8m2i1n9g62fg7r3ki1z";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];
        
      };
      "vec_map" = rec {
        crateName = "vec_map";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1481w9g1dw9rxp3l6snkdqihzyrd2f8vispzqmwjwsdyhw8xzggi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
        };
      };
      "version_check 0.1.5" = rec {
        crateName = "version_check";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1pf91pvj8n6akh7w6j5ypka6aqz08b3qpzgs0ak2kjf4frkiljwi";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        
      };
      "version_check 0.9.1" = rec {
        crateName = "version_check";
        version = "0.9.1";
        edition = "2015";
        sha256 = "1kikqlnggii1rvnxrbls55sc46lxvinz5k3giscgncjj4p87b1q7";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        
      };
      "want" = rec {
        crateName = "want";
        version = "0.3.0";
        edition = "2018";
        sha256 = "181b2zmwfq389x9n2g1n37cvcvvdand832zz6v8i1l8wrdlaks0w";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "try-lock";
            packageId = "try-lock";
          }
        ];
        
      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.9.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "06g5v3vrdapfzvfq662cij7v8a1flwr2my45nnncdv2galrdzkfc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.62";
        edition = "2018";
        sha256 = "0lamri3lmd8l0lwyillfvnlmf7ifv5bwyn5fjm40zgyd146x9iz3";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = [ "spans" "std" ];
          "enable-interning" = [ "std" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "spans" = [ "wasm-bindgen-macro/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "serde-serialize" "serde_json" "spans" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.62";
        edition = "2018";
        sha256 = "155cnh02p51fl7ln4d3kzkf006adsy7nqbajvc00k0xzgq9jx5y3";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.12";
        edition = "2018";
        sha256 = "012bm8i25hkawa3fabv5lgww5jx38ak4vbv29phnjxgv3mg9qdla";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (target."feature" == "atomics");
            features = [ "MessageEvent" "Worker" ];
          }
        ];
        
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.62";
        edition = "2018";
        sha256 = "0xjpnrv9qlva5imi78jgwafi5y81v3q8ailm88j8ks3rqni5mn1c";
        procMacro = true;
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = [ "wasm-bindgen-macro-support/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.62";
        edition = "2018";
        sha256 = "0ap7vzn0v7kilwhwjfpcpc0lykvva0b2zzbzj0s36ma77ayrgccf";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "visit" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
          "spans" = [ "wasm-bindgen-backend/spans" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.62";
        edition = "2018";
        sha256 = "1baqpg0riw5yysyln0a8c1j4fjyr5nmglyjh2vish5ww24b2j759";
        authors = [
          "The wasm-bindgen Developers"
        ];
        
      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.39";
        edition = "2018";
        sha256 = "0hm6f7bc6rak3a3cyvyglx5qw8nx5w5dald0hybcniivvpjmkhwb";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "AbortSignal" = [ "EventTarget" ];
          "AnalyserNode" = [ "AudioNode" "EventTarget" ];
          "Animation" = [ "EventTarget" ];
          "AnimationEvent" = [ "Event" ];
          "AnimationPlaybackEvent" = [ "Event" ];
          "Attr" = [ "EventTarget" "Node" ];
          "AudioBufferSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "AudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "AudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "AudioNode" = [ "EventTarget" ];
          "AudioProcessingEvent" = [ "Event" ];
          "AudioScheduledSourceNode" = [ "AudioNode" "EventTarget" ];
          "AudioStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "AudioTrackList" = [ "EventTarget" ];
          "AudioWorklet" = [ "Worklet" ];
          "AudioWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "AudioWorkletNode" = [ "AudioNode" "EventTarget" ];
          "AuthenticatorAssertionResponse" = [ "AuthenticatorResponse" ];
          "AuthenticatorAttestationResponse" = [ "AuthenticatorResponse" ];
          "BaseAudioContext" = [ "EventTarget" ];
          "BatteryManager" = [ "EventTarget" ];
          "BeforeUnloadEvent" = [ "Event" ];
          "BiquadFilterNode" = [ "AudioNode" "EventTarget" ];
          "BlobEvent" = [ "Event" ];
          "BroadcastChannel" = [ "EventTarget" ];
          "CanvasCaptureMediaStream" = [ "EventTarget" "MediaStream" ];
          "CdataSection" = [ "CharacterData" "EventTarget" "Node" "Text" ];
          "ChannelMergerNode" = [ "AudioNode" "EventTarget" ];
          "ChannelSplitterNode" = [ "AudioNode" "EventTarget" ];
          "CharacterData" = [ "EventTarget" "Node" ];
          "ChromeWorker" = [ "EventTarget" "Worker" ];
          "Clipboard" = [ "EventTarget" ];
          "ClipboardEvent" = [ "Event" ];
          "CloseEvent" = [ "Event" ];
          "Comment" = [ "CharacterData" "EventTarget" "Node" ];
          "CompositionEvent" = [ "Event" "UiEvent" ];
          "ConstantSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "ConvolverNode" = [ "AudioNode" "EventTarget" ];
          "CssAnimation" = [ "Animation" "EventTarget" ];
          "CssConditionRule" = [ "CssGroupingRule" "CssRule" ];
          "CssCounterStyleRule" = [ "CssRule" ];
          "CssFontFaceRule" = [ "CssRule" ];
          "CssFontFeatureValuesRule" = [ "CssRule" ];
          "CssGroupingRule" = [ "CssRule" ];
          "CssImportRule" = [ "CssRule" ];
          "CssKeyframeRule" = [ "CssRule" ];
          "CssKeyframesRule" = [ "CssRule" ];
          "CssMediaRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssNamespaceRule" = [ "CssRule" ];
          "CssPageRule" = [ "CssRule" ];
          "CssStyleRule" = [ "CssRule" ];
          "CssStyleSheet" = [ "StyleSheet" ];
          "CssSupportsRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssTransition" = [ "Animation" "EventTarget" ];
          "CustomEvent" = [ "Event" ];
          "DedicatedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "DelayNode" = [ "AudioNode" "EventTarget" ];
          "DeviceLightEvent" = [ "Event" ];
          "DeviceMotionEvent" = [ "Event" ];
          "DeviceOrientationEvent" = [ "Event" ];
          "DeviceProximityEvent" = [ "Event" ];
          "Document" = [ "EventTarget" "Node" ];
          "DocumentFragment" = [ "EventTarget" "Node" ];
          "DocumentTimeline" = [ "AnimationTimeline" ];
          "DocumentType" = [ "EventTarget" "Node" ];
          "DomMatrix" = [ "DomMatrixReadOnly" ];
          "DomPoint" = [ "DomPointReadOnly" ];
          "DomRect" = [ "DomRectReadOnly" ];
          "DomRequest" = [ "EventTarget" ];
          "DragEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "DynamicsCompressorNode" = [ "AudioNode" "EventTarget" ];
          "Element" = [ "EventTarget" "Node" ];
          "ErrorEvent" = [ "Event" ];
          "EventSource" = [ "EventTarget" ];
          "ExtendableEvent" = [ "Event" ];
          "ExtendableMessageEvent" = [ "Event" "ExtendableEvent" ];
          "FetchEvent" = [ "Event" "ExtendableEvent" ];
          "FetchObserver" = [ "EventTarget" ];
          "File" = [ "Blob" ];
          "FileReader" = [ "EventTarget" ];
          "FileSystemDirectoryEntry" = [ "FileSystemEntry" ];
          "FileSystemFileEntry" = [ "FileSystemEntry" ];
          "FocusEvent" = [ "Event" "UiEvent" ];
          "FontFaceSet" = [ "EventTarget" ];
          "FontFaceSetLoadEvent" = [ "Event" ];
          "GainNode" = [ "AudioNode" "EventTarget" ];
          "GamepadAxisMoveEvent" = [ "Event" "GamepadEvent" ];
          "GamepadButtonEvent" = [ "Event" "GamepadEvent" ];
          "GamepadEvent" = [ "Event" ];
          "GpuDevice" = [ "EventTarget" ];
          "GpuUncapturedErrorEvent" = [ "Event" ];
          "HashChangeEvent" = [ "Event" ];
          "HtmlAnchorElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAudioElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "HtmlBaseElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBodyElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlButtonElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlCanvasElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDetailsElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDialogElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDirectoryElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDivElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDocument" = [ "Document" "EventTarget" "Node" ];
          "HtmlElement" = [ "Element" "EventTarget" "Node" ];
          "HtmlEmbedElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFieldSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFontElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFormControlsCollection" = [ "HtmlCollection" ];
          "HtmlFormElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadingElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHtmlElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlIFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlImageElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlInputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLabelElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLegendElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLiElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLinkElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMapElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMediaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuItemElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMetaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMeterElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlModElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlObjectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptGroupElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionsCollection" = [ "HtmlCollection" ];
          "HtmlOutputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParagraphElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParamElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPictureElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPreElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlProgressElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlQuoteElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlScriptElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSelectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSlotElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSourceElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSpanElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlStyleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCaptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCellElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableColElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableRowElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableSectionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTemplateElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTextAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTimeElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTitleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTrackElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUnknownElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlVideoElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "IdbCursorWithValue" = [ "IdbCursor" ];
          "IdbDatabase" = [ "EventTarget" ];
          "IdbFileHandle" = [ "EventTarget" ];
          "IdbFileRequest" = [ "DomRequest" "EventTarget" ];
          "IdbLocaleAwareKeyRange" = [ "IdbKeyRange" ];
          "IdbMutableFile" = [ "EventTarget" ];
          "IdbOpenDbRequest" = [ "EventTarget" "IdbRequest" ];
          "IdbRequest" = [ "EventTarget" ];
          "IdbTransaction" = [ "EventTarget" ];
          "IdbVersionChangeEvent" = [ "Event" ];
          "IirFilterNode" = [ "AudioNode" "EventTarget" ];
          "ImageCapture" = [ "EventTarget" ];
          "ImageCaptureErrorEvent" = [ "Event" ];
          "InputEvent" = [ "Event" "UiEvent" ];
          "KeyboardEvent" = [ "Event" "UiEvent" ];
          "KeyframeEffect" = [ "AnimationEffect" ];
          "LocalMediaStream" = [ "EventTarget" "MediaStream" ];
          "MediaDevices" = [ "EventTarget" ];
          "MediaElementAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaEncryptedEvent" = [ "Event" ];
          "MediaKeyError" = [ "Event" ];
          "MediaKeyMessageEvent" = [ "Event" ];
          "MediaKeySession" = [ "EventTarget" ];
          "MediaQueryList" = [ "EventTarget" ];
          "MediaQueryListEvent" = [ "Event" ];
          "MediaRecorder" = [ "EventTarget" ];
          "MediaRecorderErrorEvent" = [ "Event" ];
          "MediaSource" = [ "EventTarget" ];
          "MediaStream" = [ "EventTarget" ];
          "MediaStreamAudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamEvent" = [ "Event" ];
          "MediaStreamTrack" = [ "EventTarget" ];
          "MediaStreamTrackEvent" = [ "Event" ];
          "MessageEvent" = [ "Event" ];
          "MessagePort" = [ "EventTarget" ];
          "MidiAccess" = [ "EventTarget" ];
          "MidiConnectionEvent" = [ "Event" ];
          "MidiInput" = [ "EventTarget" "MidiPort" ];
          "MidiMessageEvent" = [ "Event" ];
          "MidiOutput" = [ "EventTarget" "MidiPort" ];
          "MidiPort" = [ "EventTarget" ];
          "MouseEvent" = [ "Event" "UiEvent" ];
          "MouseScrollEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "MutationEvent" = [ "Event" ];
          "NetworkInformation" = [ "EventTarget" ];
          "Node" = [ "EventTarget" ];
          "Notification" = [ "EventTarget" ];
          "NotificationEvent" = [ "Event" "ExtendableEvent" ];
          "OfflineAudioCompletionEvent" = [ "Event" ];
          "OfflineAudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "OfflineResourceList" = [ "EventTarget" ];
          "OffscreenCanvas" = [ "EventTarget" ];
          "OscillatorNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "PageTransitionEvent" = [ "Event" ];
          "PaintWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "PannerNode" = [ "AudioNode" "EventTarget" ];
          "PaymentMethodChangeEvent" = [ "Event" "PaymentRequestUpdateEvent" ];
          "PaymentRequestUpdateEvent" = [ "Event" ];
          "Performance" = [ "EventTarget" ];
          "PerformanceMark" = [ "PerformanceEntry" ];
          "PerformanceMeasure" = [ "PerformanceEntry" ];
          "PerformanceNavigationTiming" = [ "PerformanceEntry" "PerformanceResourceTiming" ];
          "PerformanceResourceTiming" = [ "PerformanceEntry" ];
          "PermissionStatus" = [ "EventTarget" ];
          "PointerEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "PopStateEvent" = [ "Event" ];
          "PopupBlockedEvent" = [ "Event" ];
          "PresentationAvailability" = [ "EventTarget" ];
          "PresentationConnection" = [ "EventTarget" ];
          "PresentationConnectionAvailableEvent" = [ "Event" ];
          "PresentationConnectionCloseEvent" = [ "Event" ];
          "PresentationConnectionList" = [ "EventTarget" ];
          "PresentationRequest" = [ "EventTarget" ];
          "ProcessingInstruction" = [ "CharacterData" "EventTarget" "Node" ];
          "ProgressEvent" = [ "Event" ];
          "PromiseRejectionEvent" = [ "Event" ];
          "PublicKeyCredential" = [ "Credential" ];
          "PushEvent" = [ "Event" "ExtendableEvent" ];
          "RadioNodeList" = [ "NodeList" ];
          "RtcDataChannel" = [ "EventTarget" ];
          "RtcDataChannelEvent" = [ "Event" ];
          "RtcPeerConnection" = [ "EventTarget" ];
          "RtcPeerConnectionIceEvent" = [ "Event" ];
          "RtcTrackEvent" = [ "Event" ];
          "RtcdtmfSender" = [ "EventTarget" ];
          "RtcdtmfToneChangeEvent" = [ "Event" ];
          "Screen" = [ "EventTarget" ];
          "ScreenOrientation" = [ "EventTarget" ];
          "ScriptProcessorNode" = [ "AudioNode" "EventTarget" ];
          "ScrollAreaEvent" = [ "Event" "UiEvent" ];
          "SecurityPolicyViolationEvent" = [ "Event" ];
          "ServiceWorker" = [ "EventTarget" ];
          "ServiceWorkerContainer" = [ "EventTarget" ];
          "ServiceWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "ServiceWorkerRegistration" = [ "EventTarget" ];
          "ShadowRoot" = [ "DocumentFragment" "EventTarget" "Node" ];
          "SharedWorker" = [ "EventTarget" ];
          "SharedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "SourceBuffer" = [ "EventTarget" ];
          "SourceBufferList" = [ "EventTarget" ];
          "SpeechRecognition" = [ "EventTarget" ];
          "SpeechRecognitionError" = [ "Event" ];
          "SpeechRecognitionEvent" = [ "Event" ];
          "SpeechSynthesis" = [ "EventTarget" ];
          "SpeechSynthesisErrorEvent" = [ "Event" "SpeechSynthesisEvent" ];
          "SpeechSynthesisEvent" = [ "Event" ];
          "SpeechSynthesisUtterance" = [ "EventTarget" ];
          "StereoPannerNode" = [ "AudioNode" "EventTarget" ];
          "StorageEvent" = [ "Event" ];
          "SvgAnimateElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateMotionElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateTransformElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimationElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgCircleElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgClipPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgComponentTransferFunctionElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgDefsElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgDescElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgElement" = [ "Element" "EventTarget" "Node" ];
          "SvgEllipseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgFilterElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgForeignObjectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGeometryElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgGraphicsElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgLineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgLinearGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgMarkerElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMaskElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMetadataElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPathSegArcAbs" = [ "SvgPathSeg" ];
          "SvgPathSegArcRel" = [ "SvgPathSeg" ];
          "SvgPathSegClosePath" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalRel" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoRel" = [ "SvgPathSeg" ];
          "SvgPatternElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPolygonElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPolylineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgRadialGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgRectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgScriptElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSetElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgStopElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgStyleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSwitchElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgSymbolElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgTextContentElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgTextElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "SvgTextPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTextPositioningElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTitleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgUseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgViewElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgaElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgfeBlendElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeColorMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeComponentTransferElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeCompositeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeConvolveMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDiffuseLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDisplacementMapElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDistantLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDropShadowElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFloodElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFuncAElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncBElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncGElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncRElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeGaussianBlurElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeNodeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMorphologyElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeOffsetElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfePointLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpecularLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpotLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTileElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTurbulenceElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvggElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgmPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgsvgElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgtSpanElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "TcpServerSocket" = [ "EventTarget" ];
          "TcpServerSocketEvent" = [ "Event" ];
          "TcpSocket" = [ "EventTarget" ];
          "TcpSocketErrorEvent" = [ "Event" ];
          "TcpSocketEvent" = [ "Event" ];
          "Text" = [ "CharacterData" "EventTarget" "Node" ];
          "TextTrack" = [ "EventTarget" ];
          "TextTrackCue" = [ "EventTarget" ];
          "TextTrackList" = [ "EventTarget" ];
          "TimeEvent" = [ "Event" ];
          "TouchEvent" = [ "Event" "UiEvent" ];
          "TrackEvent" = [ "Event" ];
          "TransitionEvent" = [ "Event" ];
          "UiEvent" = [ "Event" ];
          "UserProximityEvent" = [ "Event" ];
          "VideoStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "VideoTrackList" = [ "EventTarget" ];
          "VrDisplay" = [ "EventTarget" ];
          "VttCue" = [ "EventTarget" "TextTrackCue" ];
          "WaveShaperNode" = [ "AudioNode" "EventTarget" ];
          "WebGlContextEvent" = [ "Event" ];
          "WebKitCssMatrix" = [ "DomMatrix" "DomMatrixReadOnly" ];
          "WebSocket" = [ "EventTarget" ];
          "WheelEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "Window" = [ "EventTarget" ];
          "WindowClient" = [ "Client" ];
          "Worker" = [ "EventTarget" ];
          "WorkerDebuggerGlobalScope" = [ "EventTarget" ];
          "WorkerGlobalScope" = [ "EventTarget" ];
          "XmlDocument" = [ "Document" "EventTarget" "Node" ];
          "XmlHttpRequest" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XmlHttpRequestEventTarget" = [ "EventTarget" ];
          "XmlHttpRequestUpload" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "Xr" = [ "EventTarget" ];
          "XrBoundedReferenceSpace" = [ "EventTarget" "XrReferenceSpace" "XrSpace" ];
          "XrInputSourceEvent" = [ "Event" ];
          "XrInputSourcesChangeEvent" = [ "Event" ];
          "XrReferenceSpace" = [ "EventTarget" "XrSpace" ];
          "XrReferenceSpaceEvent" = [ "Event" ];
          "XrSession" = [ "EventTarget" ];
          "XrSessionEvent" = [ "Event" ];
          "XrSpace" = [ "EventTarget" ];
          "XrViewerPose" = [ "XrPose" ];
        };
        resolvedDefaultFeatures = [ "Crypto" "Event" "EventTarget" "Headers" "MessageEvent" "Request" "RequestInit" "RequestMode" "Response" "Window" "Worker" ];
      };
      "webapp" = rec {
        crateName = "webapp";
        version = "1.0.0";
        edition = "2018";
        src = (builtins.filterSource sourceFilter ./.);
        authors = [
          "Sascha Grunert <mail@saschagrunert.de>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "diesel";
            packageId = "diesel";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "toml";
            packageId = "toml";
          }
        ];
        features = {
          "backend" = [ "diesel" ];
        };
        resolvedDefaultFeatures = [ "backend" "diesel" ];
      };
      "webapp-backend" = rec {
        crateName = "webapp-backend";
        version = "1.0.0";
        edition = "2018";
        crateBin = [
          { name = "backend"; path = "src/main.rs"; }
        ];
        src = (builtins.filterSource sourceFilter ./backend);
        authors = [
          "Sascha Grunert <mail@saschagrunert.de>"
        ];
        dependencies = [
          {
            name = "actix";
            packageId = "actix";
          }
          {
            name = "actix-cors";
            packageId = "actix-cors";
          }
          {
            name = "actix-files";
            packageId = "actix-files";
          }
          {
            name = "actix-web";
            packageId = "actix-web";
            features = [ "openssl" ];
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "yaml" ];
          }
          {
            name = "diesel";
            packageId = "diesel";
            features = [ "r2d2" "postgres" ];
          }
          {
            name = "env_logger";
            packageId = "env_logger 0.7.1";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "jsonwebtoken";
            packageId = "jsonwebtoken";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "openssl";
            packageId = "openssl";
          }
          {
            name = "r2d2";
            packageId = "r2d2";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "uuid";
            packageId = "uuid";
            features = [ "v4" ];
          }
          {
            name = "webapp";
            packageId = "webapp";
            features = [ "backend" ];
          }
        ];
        devDependencies = [
          {
            name = "actix-http";
            packageId = "actix-http";
          }
          {
            name = "actix-http-test";
            packageId = "actix-http-test";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            features = [ "blocking" "json" ];
          }
        ];
        
      };
      "webapp-frontend" = rec {
        crateName = "webapp-frontend";
        version = "1.0.0";
        edition = "2018";
        crateBin = [
          { name = "app"; path = "src/main.rs"; }
        ];
        src = (builtins.filterSource sourceFilter ./frontend);
        authors = [
          "Sascha Grunert <mail@saschagrunert.de>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "stdweb";
            packageId = "stdweb";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "webapp";
            packageId = "webapp";
          }
          {
            name = "yew";
            packageId = "yew";
            features = [ "std_web" ];
          }
          {
            name = "yew-router";
            packageId = "yew-router";
            features = [ "std_web" ];
          }
        ];
        buildDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "sass-rs";
            packageId = "sass-rs";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "webapp";
            packageId = "webapp";
          }
        ];
        
      };
      "widestring" = rec {
        crateName = "widestring";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dhx6dndjsz1y7c9w06922412kdxyrrkqblvggm76mh8z17hxz7g";
        authors = [
          "Kathryn Long <squeeself@gmail.com>"
        ];
        
      };
      "winapi 0.2.8" = rec {
        crateName = "winapi";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0yh816lh6lf56dpsgxy189c2ai1z3j8mw9si6izqb6wsjkbcjz8n";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi 0.3.8" = rec {
        crateName = "winapi";
        version = "0.3.8";
        edition = "2015";
        sha256 = "1ii9j9lzrhwri0902652awifzx9fpayimbp6hfhhc296xcg0k4w0";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "impl-debug" "impl-default" "lmcons" "minschannel" "minwinbase" "minwindef" "ntdef" "ntsecapi" "ntstatus" "processenv" "profileapi" "schannel" "securitybaseapi" "sspi" "std" "sysinfoapi" "timezoneapi" "winbase" "wincon" "wincrypt" "winerror" "winnt" "winreg" "winsock2" "ws2def" "ws2ipdef" "ws2tcpip" "wtypesbase" ];
      };
      "winapi-build" = rec {
        crateName = "winapi-build";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1g4rqsgjky0a7530qajn2bbfcrl2v0zb39idgdws9b1l7gp5wc9d";
        libName = "build";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0y71bp7f6d536czj40dhqk0d55wfbbwqfp2ymqf1an5ibgl6rv3h";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];
        
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winreg" = rec {
        crateName = "winreg";
        version = "0.6.2";
        edition = "2015";
        sha256 = "1jdcqr6zmvwyrp87h48miasfdvv16gjsb60rc8dy2kqwb3mnv65j";
        authors = [
          "Igor Shaula <gentoo90@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            features = [ "impl-default" "impl-debug" "minwindef" "minwinbase" "timezoneapi" "winerror" "winnt" "winreg" "handleapi" ];
          }
        ];
        features = {
          "serialization-serde" = [ "transactions" "serde" ];
          "transactions" = [ "winapi/ktmw32" ];
        };
      };
      "ws2_32-sys" = rec {
        crateName = "ws2_32-sys";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0ppscg5qfqaw0gzwv2a4nhn5bn01ff9iwn6ysqnzm4n8s3myz76m";
        libName = "ws2_32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
      "yaml-rust" = rec {
        crateName = "yaml-rust";
        version = "0.3.5";
        edition = "2015";
        sha256 = "14m9dzwb8fb05f4jjb4nqp49rxd9c5vcmwpv3a04d2y5iphncqz6";
        authors = [
          "Yuheng Chen <yuhengchen@sensetime.com>"
        ];
        features = {
          "preserve_order" = [ "linked-hash-map" ];
        };
      };
      "yew" = rec {
        crateName = "yew";
        version = "0.14.3";
        edition = "2018";
        sha256 = "1wr5q4l1r960mwjbr10j2g4x8kfj5jmdc322blp3cc2f4rmvqj1f";
        authors = [
          "Denis Kolodin <deniskolodin@gmail.com>"
          "Justin Starry <justin@yew.rs>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "anymap";
            packageId = "anymap";
          }
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cfg-match";
            packageId = "cfg-match";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
          {
            name = "proc-macro-nested";
            packageId = "proc-macro-nested";
          }
          {
            name = "ryu";
            packageId = "ryu";
            target = { target, features }: (target."os" == "emscripten");
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "stdweb";
            packageId = "stdweb";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ((target."arch" == "wasm32") && (!(target."os" == "wasi")) && (!target."cargo_web"));
          }
          {
            name = "yew-macro";
            packageId = "yew-macro";
          }
        ];
        devDependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
        ];
        features = {
          "agent" = [ "bincode" ];
          "cbor" = [ "serde_cbor" ];
          "default" = [ "services" "agent" ];
          "msgpack" = [ "rmp-serde" ];
          "std_web" = [ "stdweb" ];
          "web_sys" = [ "console_error_panic_hook" "futures" "gloo" "js-sys" "web-sys" "wasm-bindgen" "wasm-bindgen-futures" ];
          "yaml" = [ "serde_yaml" ];
        };
        resolvedDefaultFeatures = [ "agent" "bincode" "default" "services" "std_web" "stdweb" ];
      };
      "yew-macro" = rec {
        crateName = "yew-macro";
        version = "0.14.1";
        edition = "2018";
        sha256 = "0g0mf3xzx59cnd8jw0p63f51dcpvnrn4np0c3d1zcb6364inak07";
        procMacro = true;
        authors = [
          "Justin Starry <justin@yew.rs>"
        ];
        dependencies = [
          {
            name = "boolinator";
            packageId = "boolinator";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" "extra-traits" ];
          }
        ];
        features = {
        };
      };
      "yew-router" = rec {
        crateName = "yew-router";
        version = "0.11.0";
        edition = "2018";
        sha256 = "1f3xx8bnclbl7sf9v24d59ny3n2kjmc5zvq6db9cnddarx9mj50r";
        authors = [
          "Henry Zimmerman <zimhen7@gmail.com>"
          "Sascha Grunert <mail@saschagrunert.de>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cfg-match";
            packageId = "cfg-match";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nom";
            packageId = "nom 5.1.1";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "stdweb";
            packageId = "stdweb";
            optional = true;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ((target."arch" == "wasm32") && (!(target."os" == "wasi")) && (!target."cargo_web"));
          }
          {
            name = "yew";
            packageId = "yew";
            optional = true;
            features = [ "services" "agent" ];
          }
          {
            name = "yew-router-macro";
            packageId = "yew-router-macro";
          }
          {
            name = "yew-router-route-parser";
            packageId = "yew-router-route-parser";
          }
        ];
        features = {
          "agent" = [ "service" ];
          "components" = [ "agent" ];
          "core" = [ "router" "components" ];
          "default" = [ "core" "unit_alias" ];
          "router" = [ "agent" ];
          "service" = [ "yew" ];
          "std_web" = [ "yew/std_web" "stdweb" ];
          "web_sys" = [ "yew/web_sys" "gloo" "js-sys" "web-sys" "wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "agent" "components" "core" "default" "router" "service" "std_web" "stdweb" "unit_alias" "yew" ];
      };
      "yew-router-macro" = rec {
        crateName = "yew-router-macro";
        version = "0.11.0";
        edition = "2018";
        sha256 = "1rxkzdcxgdafqxms29dp9sqwpcl0gah6qvy4y9qar91yi9328asy";
        procMacro = true;
        authors = [
          "Henry Zimmerman <zimhen7@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
          {
            name = "yew-router-route-parser";
            packageId = "yew-router-route-parser";
          }
        ];
        
      };
      "yew-router-route-parser" = rec {
        crateName = "yew-router-route-parser";
        version = "0.11.0";
        edition = "2018";
        sha256 = "1n38y9qyjw85cvhqspi24hfqhlbwc90v281znczk30w5xgb02s4f";
        authors = [
          "Henry Zimmerman <zimhen7@gmail.com>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom 5.1.1";
          }
        ];
        
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
     This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os = if stdenv.hostPlatform.isDarwin
    then "macos"
    else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks        
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
     of crate given as the second argument.

     testCrateFlags: list of flags to pass to the test exectuable
     testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test = let
        drv = testCrate.override (
          _: {
            buildTests = true;
          }
        );
      in
        pkgs.runCommand "run-tests-${testCrate.name}" {
          inherit testCrateFlags;
          buildInputs = testInputs;
        } ''
          set -ex
          cd ${crate.src}
          for file in ${drv}/tests/*; do
            $file $testCrateFlags 2>&1 | tee -a $out
          done
        '';
    in
      crate.overrideAttrs (
        old: {
          checkPhase = ''
            test -e ${test}
          '';
          passthru = (old.passthru or {}) // {
            inherit test;
          };
        }
      );

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateFunc ? (
        if crateOverrides == pkgs.defaultCrateOverrides
        then buildRustCrate
        else buildRustCrate.override {
          defaultCrateOverrides = crateOverrides;
        }
      )
    , runTests ? false
    , testCrateFlags ? []
    , testInputs ? []
    }:
      lib.makeOverridable
        (
          { features, crateOverrides, runTests, testCrateFlags, testInputs }:
            let
              builtRustCrates = builtRustCratesWithFeatures {
                inherit packageId features buildRustCrateFunc;
                runTests = false;
              };
              builtTestRustCrates = builtRustCratesWithFeatures {
                inherit packageId features buildRustCrateFunc;
                runTests = true;
              };
              drv = builtRustCrates.${packageId};
              testDrv = builtTestRustCrates.${packageId};
            in
              if runTests then
                crateWithTest {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs;
                }
              else drv
        )
        { inherit features crateOverrides runTests testCrateFlags testInputs; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateFunc 
     for the corresponding crate. 
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args // {
            inherit rootPackageId;
            target = target // { test = runTests; };
          }
        );

        buildByPackageId = packageId: buildByPackageIdImpl packageId;

        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageId =
          lib.mapAttrs (packageId: value: buildByPackageId packageId) crateConfigs;

        buildByPackageIdImpl = packageId:
          let
            features = mergedFeatures."${packageId}" or [];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or []);
            dependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies =
                  (crateConfig.dependencies or [])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies = crateConfig.buildDependencies or [];
              };

            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };

            dependenciesWithRenames =
              lib.filter (d: d ? "rename") (
                filterEnabledDependenciesForThis
                  (
                    (crateConfig.buildDependencies or [])
                    ++ (crateConfig.dependencies or [])
                    ++ devDependencies
                  )
              );

            crateRenames =
              builtins.listToAttrs
                (map (d: { name = d.name; value = d.rename; }) dependenciesWithRenames);
          in
            buildRustCrateFunc (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    url = "https://crates.io/api/v1/crates/${crateConfig.crateName}/${crateConfig.version}/download";
                    sha256 = crateConfig.sha256;
                  }
                );
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
        builtByPackageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { builtByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isAttrs builtByPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: builtByPackageId.${dependency.packageId};
      in
        map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
     be serialized as JSON. 
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateFunc = lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson (
          buildRustCrateWithFeatures {
            buildRustCrateFunc = crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [];
              "03_dependencies" = crate.dependencies or [];
            };
            inherit packageId;
          }
        );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
      { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
     features.
   
     This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or [])
          )
          combined;
      in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

  /* Returns an attrset mapping packageId to the list of enabled features.

     If multiple paths to a dependency enable different features, the
     corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? {}
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;

        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures expandedFeatures dependency;
          in
            { inherit packageId features; };

        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = expandedFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
            foldOverCache
              (
                cache: { packageId, features }:
                  let
                    cacheFeatures = cache.${packageId} or [];
                    combinedFeatures = sortedUnique (cacheFeatures ++ features);
                  in
                    if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                    then cache
                    else mergePackageFeatures {
                      features = combinedFeatures;
                      featuresByPackageId = cache;
                      inherit crateConfigs packageId target runTests rootPackageId;
                    }
              );

        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [];
            combinedFeatures = sortedUnique (cacheFeatures ++ expandedFeatures);
          in
            featuresByPackageId // {
              "${packageId}" = combinedFeatures;
            };

        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep" (
            crateConfig.dependencies or []
            ++ lib.optionals
              (runTests && packageId == rootPackageId)
              (crateConfig.devDependencies or [])
          );

        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or []);
      in
        cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
          let
            targetFunc = dep.target or (features: true);
          in
            targetFunc { inherit features target; }
            && (
              !(dep.optional or false)
              || builtins.any (doesFeatureEnableDependency dep) features
            )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = { name, rename ? null, ... }: feature:
    let
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
      (rename == null && feature == name)
      || (rename != null && rename == feature)
      || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
     rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further
     feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or []));
      outFeatures = builtins.concatMap expandFeature inputFeatures;
    in
      sortedUnique outFeatures;

  /*
     Returns the actual features for the given dependency.
    
     features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil = if dependency.usesDefaultFeatures or true
      then [ "default" ]
      else [];
      explicitFeatures = dependency.features or [];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
          builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) {} features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
      builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #

  };
}
