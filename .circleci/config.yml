---
version: 2.1

executors:
  container:
    docker:
      - image: &image saschagrunert/build-rust
  machine:
    machine:
      docker_layer_caching: true
      image: ubuntu-1604:201903-01
    environment:
      POSTGRES_USER: username
      POSTGRES_DB: database
      CONTAINER_RUNTIME: docker

prepare-postgres: &prepare-postgres
  run:
    name: Prepare database
    command: |
      while true; do
        if pg_isready -qh localhost; then break; fi
      done
      diesel migration run \
        --database-url postgres://username:@localhost/database

workflows:
  version: 2
  pipeline:
    jobs:
      - build
      - doc
      - doc-publish:
          requires:
            - doc
          filters:
            branches:
              only: master
      - rustfmt
      - clippy
      - test
      - container
      - container-test:
          requires:
            - container
      - deploy:
          requires:
            - container-test
          filters:
            branches:
              only:
                - master

jobs:
  build:
    executor: machine
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Build all targets
          command: |
            docker pull $IMAGE
            docker run -v $(pwd):/build -w /build $IMAGE make
            sudo chown -R $(id -u):$(id -g) target
          environment:
            IMAGE: *image
      - save_cache:
          key: build-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - target

  doc:
    executor: machine
    steps:
      - checkout
      - restore_cache:
          keys:
            - doc-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Build documentation
          command: |
            docker pull $IMAGE
            docker run -v $(pwd):/build -w /build $IMAGE make build-doc
            sudo chown -R $(id -u):$(id -g) target
          environment:
            IMAGE: *image
      - save_cache:
          key: doc-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - target
      - persist_to_workspace:
          root: .
          paths:
            - target/doc

  doc-publish:
    executor: container
    steps:
      - add_ssh_keys:
          fingerprints:
            - c2:05:c6:97:5c:9d:17:b7:c8:84:fa:6d:05:55:75:8a
      - checkout
      - run:
          name: Setup git
          command: |
            git config --global user.email mail@saschagrunert.de
            git config --global user.name "CircleCI"
      - attach_workspace:
          at: .
      - run:
          name: Deploy documentation
          command: |
            git fetch origin gh-pages
            git checkout -f gh-pages
            rm -rf doc
            mv target/doc .
            git add .
            git diff-index --quiet HEAD || git commit -m 'Update documentation'
            git push -f origin gh-pages

  rustfmt:
    executor: container
    steps:
      - checkout
      - run:
          name: Rust-Format
          command: make lint-rustfmt

  clippy:
    executor: machine
    steps:
      - checkout
      - restore_cache:
          keys:
            - clippy-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Clippy
          command: |
            docker pull $IMAGE
            docker run -v $(pwd):/build -w /build $IMAGE make lint-clippy
            sudo chown -R $(id -u):$(id -g) target
          environment:
            IMAGE: *image
      - save_cache:
          key: clippy-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - target

  test:
    executor: machine
    steps:
      - checkout
      - run:
          name: Start postgres
          environment:
            IMAGE: circleci/postgres:10.4-alpine
          command: |
            docker pull $IMAGE
            docker run -d --network=host -e POSTGRES_USER -e POSTGRES_DB $IMAGE
      - run:
          name: Run tests
          environment:
            IMAGE: *image
          command: |
            docker pull $IMAGE
            docker run --security-opt seccomp=unconfined -v $(pwd):/build \
              -w /build --network=host -e CODECOV_TOKEN $IMAGE \
              bash -c "\
                while true; do \
                  if pg_isready -qh localhost; then break; fi \
                done && \
                diesel migration run \
                  --database-url postgres://username:@localhost/database && \
                make coverage && \
                bash <(curl -s https://codecov.io/bash)"

  container:
    executor: machine
    steps:
      - checkout
      - restore_cache:
          keys:
            - container-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Build container image
          command: |
            make deploy
            docker save webapp -o webapp.tar
      - save_cache:
          key: container-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - /root/.cargo/registry
            - target
      - store_artifacts:
          path: webapp.tar
      - persist_to_workspace:
          root: .
          paths:
            - webapp.tar

  container-test:
    executor: machine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - container-test-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y postgresql-client libpq-dev
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            export PATH=$HOME/.cargo/bin:$PATH
            cargo install diesel_cli --force \
              --no-default-features --features "postgres"
      - run:
          name: Load the image
          command: docker load -i webapp.tar
      - run:
          name: Test the application
          command: |
            export PATH=$HOME/.cargo/bin:$PATH
            make run-app
            sleep 3
            make test-deploy
      - save_cache:
          key: container-test-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo
            - target

  deploy:
    executor: machine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Login to registry
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Load the image and tag
          command: |
            docker load -i webapp.tar
            docker tag webapp saschagrunert/webapp
      - run:
          name: Push the image
          command: docker push saschagrunert/webapp
